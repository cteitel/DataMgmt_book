[{"path":"index.html","id":"course-overview","chapter":"1 Course overview","heading":"1 Course overview","text":"book contains lesson exercises FANR 5950/8950, Data Management Reproducible Science, Fall 2025.course materials, including syllabus, available eLC.","code":""},{"path":"index.html","id":"how-to-use-this-book","chapter":"1 Course overview","heading":"1.1 How to use this book","text":"Throughout book, find text interspersed R code. Though required, recommended follow along copying R code book script computer. code appear like one box , can copy hovering box clicking clipboard icon top-right corner:","code":"\n# This is some R code\nclass_work <- \"this\""},{"path":"index.html","id":"course-schedule","chapter":"1 Course overview","heading":"1.2 Course schedule","text":"current schedule course. subject change semester progresses updated eLC.","code":""},{"path":"intro.html","id":"intro","chapter":"2 Introduction: The What and Why of Reproducible Science","heading":"2 Introduction: The What and Why of Reproducible Science","text":"\nFigure 2.1: Notes future self (https://xkcd.com/1421/)\n","code":""},{"path":"intro.html","id":"reading","chapter":"2 Introduction: The What and Why of Reproducible Science","heading":"2.1 Reading:","text":"Alston, J. M., & Rick, J. . (2021). beginner’s guide conducting reproducible research. Bulletin Ecological Society America, 102(2), 1-14. https://doi.org/10.1002/bes2.1801","code":""},{"path":"intro.html","id":"questions-for-discussion","chapter":"2 Introduction: The What and Why of Reproducible Science","heading":"2.2 Questions for discussion","text":"reproducible science?reproducible science important?complicates practice reproducible science?coding central reproducibility?","code":""},{"path":"intro.html","id":"tools-we-will-cover-in-this-course","chapter":"2 Introduction: The What and Why of Reproducible Science","heading":"2.3 Tools we will cover in this course","text":"File management systems (folders, file types)Coding RVersion control Git GitHubData visualization RR Markdown documents writing reports","code":""},{"path":"intro.html","id":"why-use-r","chapter":"2 Introduction: The What and Why of Reproducible Science","heading":"2.4 Why use R?","text":"Open-source many packages extensionsInterdisciplinary applicationsFlexibilityOnline communities help","code":""},{"path":"intro.html","id":"a-note-on-generative-aillms","chapter":"2 Introduction: The What and Why of Reproducible Science","heading":"2.5 A note on Generative AI/LLMs","text":"Large language models (LLMs) good coding. makes sense - LLMs designed predict sentence structure vocabulary, coding essentially language consistent vocabulary sentence structure. Pretty much programming exercises course easily “solved” AI chatbot. However, hope working , learn principles computers programming work - words, learn think like computer. , learn critical treatment data scientific results. future, may use LLMs programming, learning basics going “hood”, able write useful prompts. also able troubleshoot errors AI-generated code, become common problems get complex. Nevertheless, tools useful troubleshooting , experienced user, can help think problems.","code":""},{"path":"basics.html","id":"basics","chapter":"3 Getting Started with R","heading":"3 Getting Started with R","text":"Much lesson draws Carpentries’ Data Analysis Visualization R Ecologists workshop, published CC-4.0 license.","code":""},{"path":"basics.html","id":"objectives","chapter":"3 Getting Started with R","heading":"3.1 Objectives","text":"Understand R RStudio relate one anotherUnderstand basic organization RStudio panesOrganize files using folders R projectsDefine functions, objects, arguments, working directoryUse R create new objects get basic information object types structures","code":""},{"path":"basics.html","id":"additional-reading","chapter":"3 Getting Started with R","heading":"3.2 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 2: Workflow: basics. Available: https://r4ds.hadley.nz/workflow-basics.html","code":""},{"path":"basics.html","id":"some-general-guidance-about-coding-and-data-management","chapter":"3 Getting Started with R","heading":"3.3 Some general guidance about coding and data management","text":"rarely one right way write code. One way might faster, /easier read, /simpler, always lot roads get destination.programming languages tell . well. want ! code throwing errors producing unexpected results, ’s probably didn’t understand wanted .take previous two points together: doubt, try taking another road seeing leads place.system code may different collaborator’s friend’s. usually problem, long can understand find need .","code":""},{"path":"basics.html","id":"install-r-and-rstudio","chapter":"3 Getting Started with R","heading":"3.4 Install R and RStudio","text":"R primary coding language used ecology natural resources. RStudio integrated development environment (IDE) makes using R easier. provides point--click options way organizing inputs outputs, making R easier use.Install R RStudio: get started, install R CRAN website. , install RStudio.","code":""},{"path":"basics.html","id":"familiarize-yourself-with-rstudio","chapter":"3 Getting Started with R","heading":"3.5 Familiarize yourself with RStudio","text":"Open RStudio see four windows one screen:Source: text editor, can write save code.Environment/History/Connections: panel tells objects available (define later, now think like files spreadsheets)Console: R work provides outputs code run.Files/Plots/Packages: plots create appear , can browse files load packages clicking (though don’t recommend ).can customize properties like organization windows color scheme using Tools –> Global Options. change one setting today: “General” tab, make sure “Restore .RData workspace startup” unchecked set “Save workspace .Rdata exit” “Never.” don’t want RStudio reload everything current session next time start R. sounds convenient, sake reproducibility, want start clean, empty R session every time work - anyone following behind us , . Instead, record steps scripts, save data need files, store outputs like images files.\nFigure 3.1: Setting defaults R maximum reproducibility\n","code":""},{"path":"basics.html","id":"installing-packages-also-functions-and-objects","chapter":"3 Getting Started with R","heading":"3.6 Installing packages; also, functions and objects","text":"R comes many built-functions (define later), relies heavily packages, increase amount can R. example, packages specifically built making plots, animating graphics, running machine learning models, etc. lesson, use two packages: tidyverse . tidyverse provides lot functions reading, manipulating, writing data, focus beginning course. provides way locating files computer.-called core tidyverse includes following packages:dplyr data manipulation;tidyr tidying data;ggplot2 plotting;readr reading data files various formats;stringr manipulating character strings;tibble extensions data frames;purrr functional programming;forcats better handling categorical variables.Install packages: First create new R script RStudio clicking File –> New File –> R script. “Source” window expand empty text file. Copy following code R script, run line copying console pressing Enter/Return.Now, code ? know, intalling packages tidyverse . code install.packages called function. can think verb command. tells R . Functions take arguments; can think grammatical objects (thing verb acting ). R, arguments included parentheses function. programming languages use different syntax (example, spaces dots). \"tidyverse\" argument, allows us tell install.packages package install. (’ll get quotes later.)need run install.packages package. Like program/application, now stored machine. Now, use package, need run library function. time, use RStudio’s feature automatically send code console moving blinking cursor line, clicking “Run” (top left) Ctrl+Enter (Cmd+Return Mac).now functions available !Programming differs using types applications menu functions. first, challenging - can know possible? - just like language, learn names functions find new ones.","code":"\ninstall.packages(\"tidyverse\")\ninstall.packages(\"here\")\nlibrary(tidyverse)\nlibrary(here)"},{"path":"basics.html","id":"folders-and-files","chapter":"3 Getting Started with R","heading":"3.7 Folders and files","text":"keep moving, important remember coding reproducible. Scripts rarely self-contained: read write data, create intermediate files, need found stored future use. practice requires using file systems – fancy way talking folders computer.Create directory course. already folder course, create subfolder called “scripts” (similar); don’t, create folder course sub-folder scripts. Now, save script just created folder. might seem basic, build organizational system throughout course.Many programming languages tolerate spaces well, good practice name files folders without spaces names. example, might want call script “lesson1.R” instead “lesson 1.R.” Even though scripts just text files, saved “.R” extension, tells computer R RStudio default program used open .can name folders like, useful file structure might look something like :","code":"FANR_8950_Fall2025\n│\n└── scripts\n│\n└── data\n│    └── cleaned\n│    └── raw\n│\n└─── outputs\n│\n└─── documents"},{"path":"basics.html","id":"r-projects","chapter":"3 Getting Started with R","heading":"3.8 R projects","text":"addition folder structure, RStudio can keep track folders files Project. create new project includes existing folders, click File –> New Project. see window asks initiate project. case, already created directory (.e., folder), choose “Existing Directory” browse find course folder.Next time open RStudio, project might automatically open. , can use dropdown menu top-right corner screen (Console window) open project.Projects necessary using R RStudio, helpful. One benefit automatically set working directory home folder project. working directory place R starts looking files saving files; directory already set helps make workflow reproducible anyone can pick project start using .","code":""},{"path":"basics.html","id":"data-structures-in-r","chapter":"3 Getting Started with R","heading":"3.9 Data structures in R","text":"R’s functions take arguments, can also create objects. Objects stored environment, allows come back .following code, use assignment arrow (<-) create object called my_number, just number value 4. run first line, see nothing seems happen.get R output anything, need ask :Vectors (1-dimensional sequence values) can come number forms:Numbers (R differentiates decimals - called double integers)CharactersFactors (ordered values)Logical (True/False)can also combined complex forms:Data frames, consist rows columns. Columns must data type (character, integer, etc.)Lists, can contain multiple data types. example, one element list might 2-column/100-row data frame, next element list might 21-element character vector. get lists later.code snippet, can also see R recognize text preceded # code. can use leave notes, “comment ” bits code want keep script, don’t want run.Vectors (, extension, columns data frames) can hold one data type. give one data type, R “coerce” vector one data types. example:can also coerce vectors , using functions like .numeric(), .character(), .factor(), etc.R didn’t know create numbers character values “three”, “four”, “TRUE”, now NA. like practice, try converting different types vectors one another. Can figure rules governing conversions?","code":"\nmy_number <- 4\nprint(my_number)\nprint(my_number + 2)\nmy_number2 <- my_number + 2\n# A numeric vector\nvec_dbl <- c(1.2, 102, 104.11, 0.1)\n\n# A character vector\nvec_chr <- c(\"apple\", \"durian\", \"canteloupe\", \"banana\")\n\n# A logical vector\nvec_lgl <- c(TRUE, FALSE, TRUE, TRUE)\n\n# Combine these into a data frame\ndf_all <- data.frame(vec_dbl, vec_chr, vec_lgl)\nprint(df_all)##   vec_dbl    vec_chr vec_lgl\n## 1    1.20      apple    TRUE\n## 2  102.00     durian   FALSE\n## 3  104.11 canteloupe    TRUE\n## 4    0.10     banana    TRUE\nvec_mixed <- c(1, 2, \"three\", \"four\", TRUE)\nprint(vec_mixed)## [1] \"1\"     \"2\"     \"three\" \"four\"  \"TRUE\"\nvec_mixed_num <- as.numeric(vec_mixed)## Warning: NAs introduced by coercion\nprint(vec_mixed_num)## [1]  1  2 NA NA NA\nas.integer(vec_lgl)## [1] 1 0 1 1\nas.character(vec_dbl)## [1] \"1.2\"    \"102\"    \"104.11\" \"0.1\""},{"path":"basics.html","id":"factors","chapter":"3 Getting Started with R","heading":"3.9.1 Factors","text":"Categorical data represented R using factors. factor stored \nvector labels called levels , hood, level gets assigned\ninteger (index value). R uses integer component factor \njob displays level ’s descriptive meaningful.\nweird nature factors often source confusion. example, \nfollowing factor,want convert years back numeric, maybe try:result expected. R converted index values\nnumbers, factor levels. specify want convert \nfactor levels numbers, underlying vector integers, \nexplicit :","code":"\nyears <- factor(c(2017, 2018, 2019, 2020, 2021))\nas.numeric(years)## [1] 1 2 3 4 5\nas.numeric(levels(years))## [1] 2017 2018 2019 2020 2021"},{"path":"basics.html","id":"a-note-tidyverse-vs.-base-r","chapter":"3 Getting Started with R","heading":"3.10 A note: tidyverse vs. base R","text":"begin delve deeply tidyverse, briefly pause mention reasons focusing tidyverse set tools. R, often many ways get job done, approaches can accomplish tasks similar tidyverse.phrase base R used refer functions contained R’s default packages. already used base R functions print(), .numeric(), etc., using scattered throughout course lesson (example, mean()). tidyverse refers set packages consisent syntax (way writing code) generally intuitive readable base R. tidyverse packages also generally come clearer help pages informative error messages.focus tidyverse packages throughout course, also note ways perform actions base R. want collaborate people write code differently , helpful familiar base R - least recognize ’re seeing.","code":""},{"path":"importexport.html","id":"importexport","chapter":"4 Data Structures and Importing Data","heading":"4 Data Structures and Importing Data","text":"lesson draws Carpentries’ Data Organization Spreadsheets Ecologists workshop, published CC-4.0 license. also based materials WILD 6900: Tools Reproducible Science, Spring 2021, Utah State University, Dr. Simona Picardi, also published CC-4.0 license.detail tidyverse approaches reading data, see “Data Import” chapter R Data Science: https://r4ds..co.nz/data-import.html","code":""},{"path":"importexport.html","id":"objectives-1","chapter":"4 Data Structures and Importing Data","heading":"4.1 Objectives","text":"Work relative file paths read write dataBring data R different sources file typesWork text/csv files R data objectsUnderstand use spreadsheets data entry management","code":""},{"path":"importexport.html","id":"additional-reading-1","chapter":"4 Data Structures and Importing Data","heading":"4.2 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 20: Spreadsheets. Available: https://r4ds.hadley.nz/spreadsheets.htmlHadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 7: Data import. Available: https://r4ds.hadley.nz/data-import.html","code":""},{"path":"importexport.html","id":"recap-data-structures","chapter":"4 Data Structures and Importing Data","heading":"4.3 Recap: data structures","text":"Objects R can come number forms:Numbers (R differentiates decimals - called double integers)CharactersFactors (ordered values)Logical (True/False)can also combined complex forms:Data frames, consist rows columns. Columns must data type (character, integer, etc.)Lists, can contain multiple data types.","code":""},{"path":"importexport.html","id":"file-types-and-their-interaction-with-r","chapter":"4 Data Structures and Importing Data","heading":"4.4 File types and their interaction with R","text":"computer can store number file types, usually indicated extension (.docx, .pdf, .csv, .xlsx, etc.). file type stores data differently. file types proprietary can read certain software. usually best convert open formats working R programming languages. likely receive data Excel files (.xls, .xlsx). used proprietary now open - however, using R requires little practice know import data information lost process.","code":""},{"path":"importexport.html","id":"reading-.csv-files-into-r","chapter":"4 Data Structures and Importing Data","heading":"4.5 Reading .csv files into R","text":"often , ’ll create data frames importing external files (.csv) R. useful functions :read.csv tidy equivalent read_csv readr packageread.table, can read .csv text files (.txt, etc.)source, reads R code files (get later)read_excel readxl packageTo practice, use data online repository:\nMurray, M. H., Sanchez, C. ., Becker, D. J., Byers, K. ., Worsley-Tonks, K. E. L., & Craft, M. E. (2020). Data : City sicker? meta-analysis wildlife health urbanization [Data set]. Zenodo. https://doi.org/10.5061/dryad.b74d971Navigate repository using DOI learn study.Notice read_csv gives us information read file, including:number rows columnsthe delimiter, separates “cells” one another (case, comma)assumed types column (, 14 character columns 28 “double”, numeric, columns)examine class new object, see data.frame, also types. used tidyverse package read data, object special type data frame called tibble. learn , check ?tbl_df.","code":"\nlibrary(tidyverse)\n# First, look at the arguments for read_csv\n?read_csv\n\n# read_csv can take any file location, including a URL. Download some data:\nurban_data <- read_csv(\"https://zenodo.org/records/3870855/files/Murray%20Sanchez%20et%20al_urban%20wildlife%20May%2020%202019.csv\")## Rows: 516 Columns: 42\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (14): TITLE, AUTHORS, JOURNAL, health, condition, toxtype, ptype, stress...\n## dbl (28): study, YEAR, SAMPLE_SIZE, EFFECT_DIRECTION, pval, r, yi, vi, rlowe...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nclass(urban_data)## [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\""},{"path":"importexport.html","id":"writing-data-from-r","chapter":"4 Data Structures and Importing Data","heading":"4.6 Writing data from R","text":"Repositories like Zenodo provide permanent ways access data, also save local copy. save csv, can use write_csv function.now see new file raw data folder.","code":"\nwrite_csv(urban_data, \"data/raw/Murray-Sanchez_urban-wildlife.csv\")"},{"path":"importexport.html","id":"working-with-spreadsheets-in-and-out-of-r","chapter":"4 Data Structures and Importing Data","heading":"4.7 Working with spreadsheets, in and out of R","text":"Many spreadsheet programs available. commonly used Excel, use Excel , principles apply Google Sheets, etc.\nFigure 4.1: temptations spreadsheets (https://xkcd.com/2180/)\n","code":""},{"path":"importexport.html","id":"spreadsheets-for-data-entry","chapter":"4 Data Structures and Importing Data","heading":"4.7.1 Spreadsheets for data entry","text":"Spreadsheets great tool data entry, compatible future analyses important set properly. One common mistake use spreadsheets like data sheets lab notebooks, include notes context lay data spatially. humans, can (usually) interpret things, computers don’t view information way, unless explain computer every single thing means (can hard!), able see data fits together.also important know (accept) best formats data entry might best formats data analysis. next lesson, learn use R automatically convert one another, also helpful understand principles data formatting spreadsheets make processes streamlined possible.","code":""},{"path":"importexport.html","id":"formatting-data-in-spreadsheets","chapter":"4 Data Structures and Importing Data","heading":"4.7.2 Formatting data in spreadsheets","text":"Open Murray, Sachez, et al. data Excel another spreadsheet program.Excel may ask want covert large numbers scientific notation. can say yes.Examine spreadsheet. easier looking data using head() functions R RStudio. first good use spreadsheets: familiarizing data.Discuss: notice structure dataset?missing values represented?duplicated information? think organized way?columns intuitive? ?else confusing interesting dataset?answer questions, need metadata, (name implies), data data. Download README file Zenodo repository: https://zenodo.org/records/3870855.","code":""},{"path":"importexport.html","id":"tidy-data","chapter":"4 Data Structures and Importing Data","heading":"4.7.3 Tidy data","text":"data set mostly “tidy” format, meaning one observation per row one variable per column. example, look host.class aqterr columns:\nFigure 4.2: Tidy data format\nentering data, might intuitively enter “terrestrial mammal,”, “terrestrial bird,” etc., way data can later filtered analyzed single classification . One case data set host.species column:\nFigure 4.3: Slightly less tidy data format\nmight later interested grouping genus, can’t way data entered right now. learn separate genus species R later.","code":""},{"path":"importexport.html","id":"what-to-avoid","chapter":"4 Data Structures and Importing Data","heading":"4.7.4 What to avoid","text":"key practices avoid creating spreadsheets include:Multiple tables sheet –> instead, use multiple tabs (sheets) file (workbook) , even better, separate file table.Using formatting convey information: formatting like bold, highlights, etc. can useful using spreadsheets, won’t load across platforms. Instead, add new column flag entries.","code":""},{"path":"troubleshooting.html","id":"troubleshooting","chapter":"5 Troubleshooting in R","heading":"5 Troubleshooting in R","text":"lesson draws heavily materials WILD 6900: Tools Reproducible Science, Spring 2021, Utah State University, Dr. Simona Picardi, also published CC-4.0 license.","code":""},{"path":"troubleshooting.html","id":"objectives-2","chapter":"5 Troubleshooting in R","heading":"5.1 Objectives","text":"Interpret common error messages encountered RUnderstand basic steps troubleshoot codeBuild awareness resources available troubleshooting","code":""},{"path":"troubleshooting.html","id":"additional-reading-2","chapter":"5 Troubleshooting in R","heading":"5.2 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 8: Workflow: getting help. Available: https://r4ds.hadley.nz/workflow-help.html","code":""},{"path":"troubleshooting.html","id":"introduction","chapter":"5 Troubleshooting in R","heading":"5.3 Introduction","text":"point, probably encountered error warning messages R. can frustrating! matter good get programming, always make mistakes, whether typos fundamental problems code. Troubleshooting fundamental programming skill.Computers tell , want . Sometimes, error appears computer doesn’t understand told , sometimes (usually worse, harder detect), accidentally tell wrong thing. R famous cryptic error messages, learning just key points can help understand computer saying back (“Wait, didn’t get , can say another way?”).","code":""},{"path":"troubleshooting.html","id":"how-to-interpret-error-messages","chapter":"5 Troubleshooting in R","heading":"5.4 How to interpret error messages","text":"Error messages can frustrating can important ally diagnosing problems code. error messages (good ones) clear point problem quite explicitly. Others cryptic, typical certain situations end working pretty good hints wrong. worst kind error undescriptive, rare one gives real clue problem . encounter .R provides three main types outputs console:Errors, indicate piece code fatal flaw run. need fixed can move .Warnings, indicate piece code ran, might done want . get warning, usually check output make sure makes sense.Messages, tell something going hood. don’t require attention.","code":""},{"path":"troubleshooting.html","id":"locating-the-problematic-piece-of-code","chapter":"5 Troubleshooting in R","heading":"5.4.1 Locating the problematic piece of code","text":"RStudio helps identify syntax errors placing little red marks left script next line numbers. However, marks warn syntax errors: missing commas, missing parentheses quotes, etc. warn improper use function wrong data dimensions.best way isolate problematic piece code step script line line error occurs. , can either problem line can mistake lines lead produced objects went input line. , first thing try dig deeper error message checking went input line actually looks like ’s supposed .","code":""},{"path":"troubleshooting.html","id":"isolating-the-error","chapter":"5 Troubleshooting in R","heading":"5.4.2 Isolating the error","text":"general, isolating problem first step troubleshooting, even within line ’s useful run piece code can run independently check ’s giving expected output. example, running following code:can run piece look double check :","code":"\ndf <- data.frame(numbers = 1:5,\n                 letters = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n                 animals = c(\"cat\", \"dog\", \"lion\", \"cheetah\", \"giraffe\"))\n1:5## [1] 1 2 3 4 5\nc(\"A\", \"B\", \"C\", \"D\", \"E\")## [1] \"A\" \"B\" \"C\" \"D\" \"E\"\nc(\"cat\", \"dog\", \"lion\", \"cheetah\", \"giraffe\")## [1] \"cat\"     \"dog\"     \"lion\"    \"cheetah\" \"giraffe\""},{"path":"troubleshooting.html","id":"deciphering-error-messages","chapter":"5 Troubleshooting in R","heading":"5.4.3 Deciphering error messages","text":"input looks good, ’s time start deciphering error message. examples common errors usually mean:object can “found” misspelled name didn’t run code correct order haven’t created yet.’s another common one:Whenever see error form replacement ... data ... know\n’re trying plug wrong number values object. \ncase, tried add column four elements data frame five\nrows. Notice error bit specific previous example\ngives us indication line failed. particularly\nuseful case ran one line, ’re troubleshooting\nfunction larger piece code works one ’s useful know \npoint within error occurred.Bottom line: use first component error message (one \nError ) identify error occurred, use second component\n(one :) understand went wrong.","code":"\ntest <- 1:10\nsum(tets)## Error: object 'tets' not found\ndf <- data.frame(numbers = 1:5,\n                 letters = c(\"A\", \"B\", \"C\", \"D\", \"E\"))\n\ndf$animals <- c(\"cat\", \"dog\", \"lion\", \"giraffe\")## Error in `$<-.data.frame`(`*tmp*`, animals, value = c(\"cat\", \"dog\", \"lion\", : replacement has 4 rows, data has 5"},{"path":"troubleshooting.html","id":"syntax-errors","chapter":"5 Troubleshooting in R","heading":"5.4.4 Syntax errors","text":"Perhaps classic error messages :Make sure take advantage RStudio’s highlighting tool check \nclosed parentheses opened. move blinking cursor opening (\nclosing) parenthesis (bracket), RStudio highlight closing (\nopening) one.Another classic:likely symptom forgot comma inside brackets \ntherefore indexing isn’t working correctly. Remember, square brackets give\nelement vector, data frame, R needs know row \ncolumn look . fix :","code":"vec <- c(1, 4, 6, 7, 8))## Error in parse(text = input): <text>:1:24: unexpected ')'\n## 1: vec <- c(1, 4, 6, 7, 8))\n##                            ^\ndf[df$numbers > 4]## Error in `[.data.frame`(df, df$numbers > 4): undefined columns selected\ndf[df$numbers > 4,]##   numbers letters\n## 5       5       E"},{"path":"troubleshooting.html","id":"errors-from-using-package-functions","chapter":"5 Troubleshooting in R","heading":"5.4.5 Errors from using package functions","text":"situations, get error message point line\ncode haven’t written. likely function \ncalling ran internal error, code ’re seeing \nerror message inside function. case, ’s good idea focus\nfunction try figure ’s working like expected. \nmostly happens using functions package base.Another common problem using functions packages function can\nexist two packages, name take completely different set\narguments different things. use one functions\nthinking ’re calling package ’s coming package B instead,\nchances inputs gave work. function \nname exists one package among loaded, R assumes \ntrying use function package loaded recently. \norder load packages matter. Another (best) solution\nuse syntax package::function specify package ’re calling\nfunction . removes ambiguity.","code":""},{"path":"troubleshooting.html","id":"errors-without-error-messages","chapter":"5 Troubleshooting in R","heading":"5.4.6 Errors without error messages","text":"Sometimes, code runs fine, produces unexpected results. harder detect - quantitative scientists know story thinking found really novel exciting result, find accidentally left half data, sorted wrong order, small coding error. tips avoiding problems:Print check intermediate products code properties. filter data frame, many rows new data frame ? line expectations?Check missing values throughout process. Many functions silently filter missing values, can produce unexpected results.","code":""},{"path":"troubleshooting.html","id":"how-to-look-for-help","chapter":"5 Troubleshooting in R","heading":"5.5 How to look for help","text":"","code":""},{"path":"troubleshooting.html","id":"r-documentation","chapter":"5 Troubleshooting in R","heading":"5.5.1 R documentation","text":"first thing check function working like expected \nlook documentation double check provided necessary\ninput right format:","code":"\n?mean"},{"path":"troubleshooting.html","id":"google","chapter":"5 Troubleshooting in R","heading":"5.5.2 Google","text":"Googling error messages can extremely helpful, also takes practice. unlikely find much useful just copying pasting error message search bar. Instead, think elements error message likely general, rather specific code. example, error message says,Error data.frame(numbers = 1:5, letters = c(“”, “B”, “C”, “D”, “E”), :\narguments imply differing number rows: 5, 4`content data frame specific situation, \nnumbers end. need remove include following \nGoogle search:Error data.frame arguments imply differing number rowsOther tips:Always add “R” end searchIf identified function error comes , add name \nfunction searchIf problematic function comes package, add name package\nsearchMost often, Googling take StackOverflow…","code":""},{"path":"troubleshooting.html","id":"stackoverflow-et-al.","chapter":"5 Troubleshooting in R","heading":"5.5.3 StackOverflow et al.","text":"cases, somebody probably already run problem posted StackOverflow similar websites. gets less true using new uncommon package, usually difficult part able apply answers forums problem. specifics dataset person using may exactly identical . thinking outside box drawing parallels case somebody else’s case becomes critical. instance, say run following code get error:go Google error, first post find StackOverflow . person trying different thing :\ntrying assign new values column data frame based another\ncolumn. problem , want replace values \nNA, slots replace fewer total length column.\nTherefore, many items spaces. case, \nsubsetting target column, ’m bit different. However,\nsituations common number spaces filled\nnumber items fill . now know \nproblem must many () values fit column.\nFigure 2.1: Artwork Allison Horst, thanks Simona Picardi including course materials\n","code":"\nvec <- 1:10\n\nmat <- matrix(NA, 5, 5)\n\nmat[1, ] <- vec## Error in mat[1, ] <- vec: number of items to replace is not a multiple of replacement length"},{"path":"troubleshooting.html","id":"other-troubleshooting-tips","chapter":"5 Troubleshooting in R","heading":"5.6 Other troubleshooting tips","text":"rubber duck: rubber duck method debugging code introduced software engineers.\nconsists explaining code, line line, rubber duck. debugging technique might sound silly, work many people: saying loud code supposed step forces us identify details might clear minds, might gotten minds script.Step away: Like many problems, sometimes short break clear mind help re-focus. problem might become clear come back itAI/LLM tools: ChatGPT LLMs can great troubleshooting buddies, especially ask explain getting error first place. careful - sometimes ’ll change parts code along way.","code":""},{"path":"troubleshooting.html","id":"some-final-wisdom","chapter":"5 Troubleshooting in R","heading":"5.7 Some final wisdom","text":"\nFigure 5.1: can always try . (https://xkcd.com/1024/)\n","code":""},{"path":"filter-select-mutate.html","id":"filter-select-mutate","chapter":"6 Data Manipulation with R, Part 1","heading":"6 Data Manipulation with R, Part 1","text":"Much lesson draws Carpentries’ Data Analysis Visualization R Ecologists workshop, published CC-4.0 license.","code":""},{"path":"filter-select-mutate.html","id":"objectives-3","chapter":"6 Data Manipulation with R, Part 1","heading":"6.1 Objectives","text":"Explore structure content data framesUnderstand vector types missing dataUnderstand R assigns values objects","code":""},{"path":"filter-select-mutate.html","id":"additional-reading-3","chapter":"6 Data Manipulation with R, Part 1","heading":"6.2 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 3: Data transformation, sections 3.1-3.4. Available: https://r4ds.hadley.nz/data-transform.html","code":""},{"path":"filter-select-mutate.html","id":"murray-sanchez-et-al.-data","chapter":"6 Data Manipulation with R, Part 1","heading":"6.3 Murray, Sanchez et al. data","text":"far, used data built R, practiced loading data URLs files. lesson, go back data Murray, Sanchez, et al., meta-analysis relationships urbanization wildlife health.","code":"\nlibrary(tidyverse)## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nurban_data <- read_csv(\"data/raw/Murray-Sanchez_urban-wildlife.csv\")## Rows: 516 Columns: 42\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (14): TITLE, AUTHORS, JOURNAL, health, condition, toxtype, ptype, stress...\n## dbl (28): study, YEAR, SAMPLE_SIZE, EFFECT_DIRECTION, pval, r, yi, vi, rlowe...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"filter-select-mutate.html","id":"filtering-rows-creating-and-selecting-columns","chapter":"6 Data Manipulation with R, Part 1","heading":"6.4 Filtering rows; creating and selecting columns","text":"One important skills working data R ability manipulate, modify, reshape data. dplyr tidyr packages tidyverse provide useful functions many common data manipulation tasks.","code":""},{"path":"filter-select-mutate.html","id":"selecting-columns-with-select","chapter":"6 Data Manipulation with R, Part 1","heading":"6.4.1 Selecting columns with select()","text":"select function allows take columns data frame. first argument name data frame, following arguments names columns want. , take species information record IDs Murray et al. dataset:function can especially useful clean data, example created intermediate columns, read data set lot extraneous information. Notice columns now reordered: host.species specified last within select, now last column.can also use select remove columns, using - symbol.select() also works numeric vectors order columns. select 3rd, 4th, 5th, 10th columns, run following code:careful using method, since less explicit columns want. However, can useful data frame many columns don’t want type many names.can also select columns based properties using () function. example, select character columns:","code":"\nurban_species <- select(urban_data, study, host.class, aqterr, host.species)\nhead(urban_species)## # A tibble: 6 × 4\n##   study host.class aqterr      host.species         \n##   <dbl> <chr>      <chr>       <chr>                \n## 1  1236 mammals    terrestrial Trichosurus_vulpecula\n## 2  1236 mammals    terrestrial Trichosurus_vulpecula\n## 3  1236 mammals    terrestrial Trichosurus_vulpecula\n## 4  1236 mammals    terrestrial Trichosurus_vulpecula\n## 5  1236 mammals    terrestrial Trichosurus_vulpecula\n## 6  1236 mammals    terrestrial Trichosurus_vulpecula\ndim(urban_species)## [1] 516   4\nselect(urban_data, -TITLE, -AUTHORS, -YEAR, -JOURNAL)## # A tibble: 516 × 38\n##    study health    condition toxtype ptype  stress2 SAMPLE_SIZE EFFECT_DIRECTION\n##    <dbl> <chr>     <chr>     <chr>   <chr>  <chr>         <dbl>            <dbl>\n##  1  1236 parasites <NA>      <NA>    Preva… <NA>             59                0\n##  2  1236 parasites <NA>      <NA>    Preva… <NA>             59               -1\n##  3  1236 parasites <NA>      <NA>    Richn… <NA>            278               -1\n##  4  1236 condition Adjusted  <NA>    <NA>   <NA>             49                1\n##  5  1236 parasites <NA>      <NA>    Inten… <NA>             16               -1\n##  6  1236 parasites <NA>      <NA>    Inten… <NA>             10                1\n##  7  1236 parasites <NA>      <NA>    Preva… <NA>             59                1\n##  8  1236 parasites <NA>      <NA>    Preva… <NA>             59               -1\n##  9  1326 toxicants <NA>      metal   <NA>   <NA>             39               -1\n## 10  1326 toxicants <NA>      metal   <NA>   <NA>             39               -1\n## # ℹ 506 more rows\n## # ℹ 30 more variables: pval <dbl>, r <dbl>, yi <dbl>, vi <dbl>, rlower <dbl>,\n## #   rupper <dbl>, yir <dbl>, ott_id <dbl>, host.species <chr>,\n## #   host.class <chr>, aqterr <chr>, parasite2 <chr>, close <dbl>,\n## #   nonclose <dbl>, vector <dbl>, intermediate <dbl>, routes <dbl>,\n## #   mroute <chr>, mlat <dbl>, mlon <dbl>, udiff_1000 <dbl>, udiff_10000 <dbl>,\n## #   uchange_1000 <dbl>, uchange_10000 <dbl>, umean_1000 <dbl>, …\nselect(urban_data, 3:5, 10)## # A tibble: 516 × 4\n##    AUTHORS          YEAR JOURNAL                          stress2\n##    <chr>           <dbl> <chr>                            <chr>  \n##  1 Webster et al.   2014 Wildlife Biology                 <NA>   \n##  2 Webster et al.   2014 Wildlife Biology                 <NA>   \n##  3 Webster et al.   2014 Wildlife Biology                 <NA>   \n##  4 Webster et al.   2014 Wildlife Biology                 <NA>   \n##  5 Webster et al.   2014 Wildlife Biology                 <NA>   \n##  6 Webster et al.   2014 Wildlife Biology                 <NA>   \n##  7 Webster et al.   2014 Wildlife Biology                 <NA>   \n##  8 Webster et al.   2014 Wildlife Biology                 <NA>   \n##  9 Hargitai et al.  2016 Science of the Total Environment <NA>   \n## 10 Hargitai et al.  2016 Science of the Total Environment <NA>   \n## # ℹ 506 more rows\nselect(urban_data, where(is.character))## # A tibble: 516 × 14\n##    TITLE     AUTHORS JOURNAL health condition toxtype ptype stress2 host.species\n##    <chr>     <chr>   <chr>   <chr>  <chr>     <chr>   <chr> <chr>   <chr>       \n##  1 Ectopara… Webste… Wildli… paras… <NA>      <NA>    Prev… <NA>    Trichosurus…\n##  2 Ectopara… Webste… Wildli… paras… <NA>      <NA>    Prev… <NA>    Trichosurus…\n##  3 Ectopara… Webste… Wildli… paras… <NA>      <NA>    Rich… <NA>    Trichosurus…\n##  4 Ectopara… Webste… Wildli… condi… Adjusted  <NA>    <NA>  <NA>    Trichosurus…\n##  5 Ectopara… Webste… Wildli… paras… <NA>      <NA>    Inte… <NA>    Trichosurus…\n##  6 Ectopara… Webste… Wildli… paras… <NA>      <NA>    Inte… <NA>    Trichosurus…\n##  7 Ectopara… Webste… Wildli… paras… <NA>      <NA>    Prev… <NA>    Trichosurus…\n##  8 Ectopara… Webste… Wildli… paras… <NA>      <NA>    Prev… <NA>    Trichosurus…\n##  9 Effects … Hargit… Scienc… toxic… <NA>      metal   <NA>  <NA>    Parus_major \n## 10 Effects … Hargit… Scienc… toxic… <NA>      metal   <NA>  <NA>    Parus_major \n## # ℹ 506 more rows\n## # ℹ 5 more variables: host.class <chr>, aqterr <chr>, parasite2 <chr>,\n## #   mroute <chr>, COUNTRY <chr>"},{"path":"filter-select-mutate.html","id":"subsetting-data-with-filter","chapter":"6 Data Manipulation with R, Part 1","heading":"6.4.2 Subsetting data with filter()","text":"filter() function subsets data frame rows meet criteria. example, get rows taxon sampled bird:Now introducing logical statements == sign! == means “equal ”. different =, specifies arguments functions (can used assignment operator, recommended). useful operators functions filtering :!=, means “equal .” ! means “” can applied many logical statements.%%, asks left hand side found anywhere vector right side..na, asks value missing.>, >=, <, <=, filter based values numeric columns.can also filter using multiple criteria simultaneously using & () | ():Can describe included excluded statements?Use urban_data data make data frame data 2000 2010.","code":"\nfilter(urban_data, host.class == \"birds\")## # A tibble: 159 × 42\n##    study TITLE      AUTHORS  YEAR JOURNAL health condition toxtype ptype stress2\n##    <dbl> <chr>      <chr>   <dbl> <chr>   <chr>  <chr>     <chr>   <chr> <chr>  \n##  1  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  2  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  3  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  4  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  5  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  6  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  7  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  8  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  9  1480 Environme… Garcia…  2005 Bullet… toxic… <NA>      metal   <NA>  <NA>   \n## 10  1480 Environme… Garcia…  2005 Bullet… toxic… <NA>      metal   <NA>  <NA>   \n## # ℹ 149 more rows\n## # ℹ 32 more variables: SAMPLE_SIZE <dbl>, EFFECT_DIRECTION <dbl>, pval <dbl>,\n## #   r <dbl>, yi <dbl>, vi <dbl>, rlower <dbl>, rupper <dbl>, yir <dbl>,\n## #   ott_id <dbl>, host.species <chr>, host.class <chr>, aqterr <chr>,\n## #   parasite2 <chr>, close <dbl>, nonclose <dbl>, vector <dbl>,\n## #   intermediate <dbl>, routes <dbl>, mroute <chr>, mlat <dbl>, mlon <dbl>,\n## #   udiff_1000 <dbl>, udiff_10000 <dbl>, uchange_1000 <dbl>, …\nfilter(urban_data, host.class != \"mammals\")## # A tibble: 321 × 42\n##    study TITLE      AUTHORS  YEAR JOURNAL health condition toxtype ptype stress2\n##    <dbl> <chr>      <chr>   <dbl> <chr>   <chr>  <chr>     <chr>   <chr> <chr>  \n##  1  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  2  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  3  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  4  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  5  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  6  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  7  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  8  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  9  1480 Environme… Garcia…  2005 Bullet… toxic… <NA>      metal   <NA>  <NA>   \n## 10  1480 Environme… Garcia…  2005 Bullet… toxic… <NA>      metal   <NA>  <NA>   \n## # ℹ 311 more rows\n## # ℹ 32 more variables: SAMPLE_SIZE <dbl>, EFFECT_DIRECTION <dbl>, pval <dbl>,\n## #   r <dbl>, yi <dbl>, vi <dbl>, rlower <dbl>, rupper <dbl>, yir <dbl>,\n## #   ott_id <dbl>, host.species <chr>, host.class <chr>, aqterr <chr>,\n## #   parasite2 <chr>, close <dbl>, nonclose <dbl>, vector <dbl>,\n## #   intermediate <dbl>, routes <dbl>, mroute <chr>, mlat <dbl>, mlon <dbl>,\n## #   udiff_1000 <dbl>, udiff_10000 <dbl>, uchange_1000 <dbl>, …\nfilter(urban_data, host.class %in% c(\"birds\",\"fish\"))## # A tibble: 251 × 42\n##    study TITLE      AUTHORS  YEAR JOURNAL health condition toxtype ptype stress2\n##    <dbl> <chr>      <chr>   <dbl> <chr>   <chr>  <chr>     <chr>   <chr> <chr>  \n##  1  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  2  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  3  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  4  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  5  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  6  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  7  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  8  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  9  1480 Environme… Garcia…  2005 Bullet… toxic… <NA>      metal   <NA>  <NA>   \n## 10  1480 Environme… Garcia…  2005 Bullet… toxic… <NA>      metal   <NA>  <NA>   \n## # ℹ 241 more rows\n## # ℹ 32 more variables: SAMPLE_SIZE <dbl>, EFFECT_DIRECTION <dbl>, pval <dbl>,\n## #   r <dbl>, yi <dbl>, vi <dbl>, rlower <dbl>, rupper <dbl>, yir <dbl>,\n## #   ott_id <dbl>, host.species <chr>, host.class <chr>, aqterr <chr>,\n## #   parasite2 <chr>, close <dbl>, nonclose <dbl>, vector <dbl>,\n## #   intermediate <dbl>, routes <dbl>, mroute <chr>, mlat <dbl>, mlon <dbl>,\n## #   udiff_1000 <dbl>, udiff_10000 <dbl>, uchange_1000 <dbl>, …\nfilter(urban_data, is.na(pval))## # A tibble: 253 × 42\n##    study TITLE      AUTHORS  YEAR JOURNAL health condition toxtype ptype stress2\n##    <dbl> <chr>      <chr>   <dbl> <chr>   <chr>  <chr>     <chr>   <chr> <chr>  \n##  1  1236 Ectoparas… Webste…  2014 Wildli… condi… Adjusted  <NA>    <NA>  <NA>   \n##  2  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Inte… <NA>   \n##  3  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Inte… <NA>   \n##  4  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  5  1480 Environme… Garcia…  2005 Bullet… toxic… <NA>      metal   <NA>  <NA>   \n##  6  1480 Environme… Garcia…  2005 Bullet… toxic… <NA>      metal   <NA>  <NA>   \n##  7  1480 Environme… Garcia…  2005 Bullet… toxic… <NA>      metal   <NA>  <NA>   \n##  8  1480 Environme… Garcia…  2005 Bullet… toxic… <NA>      metal   <NA>  <NA>   \n##  9  1869 Great Tit… Torne-…  2013 J Orni… stress <NA>      <NA>    <NA>  other  \n## 10  1903 halogenat… Olsson…  1999 Scienc… condi… Raw       <NA>    <NA>  <NA>   \n## # ℹ 243 more rows\n## # ℹ 32 more variables: SAMPLE_SIZE <dbl>, EFFECT_DIRECTION <dbl>, pval <dbl>,\n## #   r <dbl>, yi <dbl>, vi <dbl>, rlower <dbl>, rupper <dbl>, yir <dbl>,\n## #   ott_id <dbl>, host.species <chr>, host.class <chr>, aqterr <chr>,\n## #   parasite2 <chr>, close <dbl>, nonclose <dbl>, vector <dbl>,\n## #   intermediate <dbl>, routes <dbl>, mroute <chr>, mlat <dbl>, mlon <dbl>,\n## #   udiff_1000 <dbl>, udiff_10000 <dbl>, uchange_1000 <dbl>, …\nfilter(urban_data, YEAR >= 2010)## # A tibble: 422 × 42\n##    study TITLE      AUTHORS  YEAR JOURNAL health condition toxtype ptype stress2\n##    <dbl> <chr>      <chr>   <dbl> <chr>   <chr>  <chr>     <chr>   <chr> <chr>  \n##  1  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  2  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  3  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Rich… <NA>   \n##  4  1236 Ectoparas… Webste…  2014 Wildli… condi… Adjusted  <NA>    <NA>  <NA>   \n##  5  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Inte… <NA>   \n##  6  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Inte… <NA>   \n##  7  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  8  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  9  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n## 10  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n## # ℹ 412 more rows\n## # ℹ 32 more variables: SAMPLE_SIZE <dbl>, EFFECT_DIRECTION <dbl>, pval <dbl>,\n## #   r <dbl>, yi <dbl>, vi <dbl>, rlower <dbl>, rupper <dbl>, yir <dbl>,\n## #   ott_id <dbl>, host.species <chr>, host.class <chr>, aqterr <chr>,\n## #   parasite2 <chr>, close <dbl>, nonclose <dbl>, vector <dbl>,\n## #   intermediate <dbl>, routes <dbl>, mroute <chr>, mlat <dbl>, mlon <dbl>,\n## #   udiff_1000 <dbl>, udiff_10000 <dbl>, uchange_1000 <dbl>, …\nfilter(urban_data, host.class != \"mammals\" & !is.na(pval))## # A tibble: 133 × 42\n##    study TITLE      AUTHORS  YEAR JOURNAL health condition toxtype ptype stress2\n##    <dbl> <chr>      <chr>   <dbl> <chr>   <chr>  <chr>     <chr>   <chr> <chr>  \n##  1  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  2  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n##  3  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  4  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  5  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  6  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  7  1426 Egrets as… Boncom…  2003 Archiv… toxic… <NA>      metal   <NA>  <NA>   \n##  8  1934 Helminth … Rzad e…  2014 Helmin… paras… <NA>      <NA>    Prev… <NA>   \n##  9  2166 Influence… Goulso…  2012 Functi… paras… <NA>      <NA>    Prev… <NA>   \n## 10  2166 Influence… Goulso…  2012 Functi… paras… <NA>      <NA>    Prev… <NA>   \n## # ℹ 123 more rows\n## # ℹ 32 more variables: SAMPLE_SIZE <dbl>, EFFECT_DIRECTION <dbl>, pval <dbl>,\n## #   r <dbl>, yi <dbl>, vi <dbl>, rlower <dbl>, rupper <dbl>, yir <dbl>,\n## #   ott_id <dbl>, host.species <chr>, host.class <chr>, aqterr <chr>,\n## #   parasite2 <chr>, close <dbl>, nonclose <dbl>, vector <dbl>,\n## #   intermediate <dbl>, routes <dbl>, mroute <chr>, mlat <dbl>, mlon <dbl>,\n## #   udiff_1000 <dbl>, udiff_10000 <dbl>, uchange_1000 <dbl>, …\nfilter(urban_data, ptype == \"Prevalence\" | SAMPLE_SIZE > 100)## # A tibble: 218 × 42\n##    study TITLE      AUTHORS  YEAR JOURNAL health condition toxtype ptype stress2\n##    <dbl> <chr>      <chr>   <dbl> <chr>   <chr>  <chr>     <chr>   <chr> <chr>  \n##  1  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  2  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  3  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Rich… <NA>   \n##  4  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  5  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  6  1869 Great Tit… Torne-…  2013 J Orni… stress <NA>      <NA>    <NA>  other  \n##  7  1934 Helminth … Rzad e…  2014 Helmin… paras… <NA>      <NA>    Prev… <NA>   \n##  8  1955 high freq… Bagagl…  2003 Medica… paras… <NA>      <NA>    Prev… <NA>   \n##  9  2129 infection… Robard…  2008 Parasi… paras… <NA>      <NA>    Inte… <NA>   \n## 10  2129 infection… Robard…  2008 Parasi… paras… <NA>      <NA>    Inte… <NA>   \n## # ℹ 208 more rows\n## # ℹ 32 more variables: SAMPLE_SIZE <dbl>, EFFECT_DIRECTION <dbl>, pval <dbl>,\n## #   r <dbl>, yi <dbl>, vi <dbl>, rlower <dbl>, rupper <dbl>, yir <dbl>,\n## #   ott_id <dbl>, host.species <chr>, host.class <chr>, aqterr <chr>,\n## #   parasite2 <chr>, close <dbl>, nonclose <dbl>, vector <dbl>,\n## #   intermediate <dbl>, routes <dbl>, mroute <chr>, mlat <dbl>, mlon <dbl>,\n## #   udiff_1000 <dbl>, udiff_10000 <dbl>, uchange_1000 <dbl>, …"},{"path":"filter-select-mutate.html","id":"making-new-columns-with-mutate","chapter":"6 Data Manipulation with R, Part 1","heading":"6.4.3 Making new columns with mutate()","text":"Another common task making new columns using values existing columns. example, can create new column measures gross domestic product (GDP, gdpbill column) length tens billions instead billions dollars:mutate can also create multiple columns , separated comma:can also use mutate modify values existing columns. example, see transmission mode columns coded integers instead logical:replace 1s TRUEs 0s FALSEs, can use .logical function:Note works R assumes default 0 means FALSE 1 means TRUE. get ifelse statements later, allow convert types values. Another way thing using logical statement:filter, can use mutate create multiple columns :Finally, can also apply exactly function multiple columns:Note little complicated! first argument still data set (urban_data), second argument now vector column names, enclosed within c(), function across applies function multiple columns. second argument across function applied columns.Another common task replace NAs another value, replace certain character strings (e.g., \"\") NAs. example, studies difference urbanization across study area (udiff_1000 column), might want replace 0 missing value. , can use combination mutate na_if function tidyr:Finally, useful function creating new columns if_else() (base R version, ifelse). simplified version statements learn later class. makes vector function another vector, time conditionally. provide conditional statement (“”) alternative (“else”). example essentially streamlined ifelse function; following code thing:, first argument condition: asking whether udiff_1000 equal zero. second argument output condition true: place like function return NA. second argument output condition false: case like return original value vector/column, .e., udiff_1000.simpler examples:Notice , %% returns remainder division, numbers divided two remainder zero even.main difference tidyverse's if_else base R’s ifelse if_else preserves factor levels types (example, dates, learn soon).","code":"\nurban_data <- mutate(urban_data, gdpbill10 = gdpbill/10)\nurban_data <- mutate(urban_data, gdpbill10 = gdpbill10/10,\n                      years_since_1998 = YEAR - 1998) #not the best column name - a little long\n# To view the new columns, we will select them, \n# because this data frame has too many columns to print them all\n# and our new columns are placed at the end\nselect(urban_data, gdpbill, gdpbill10, YEAR, years_since_1998)## # A tibble: 516 × 4\n##    gdpbill gdpbill10  YEAR years_since_1998\n##      <dbl>     <dbl> <dbl>            <dbl>\n##  1    926       9.26  2014               16\n##  2    926       9.26  2014               16\n##  3    926       9.26  2014               16\n##  4    926       9.26  2014               16\n##  5    926       9.26  2014               16\n##  6    926       9.26  2014               16\n##  7    926       9.26  2014               16\n##  8    926       9.26  2014               16\n##  9    130.      1.30  2016               18\n## 10    130.      1.30  2016               18\n## # ℹ 506 more rows\nunique(urban_data$close)## [1]  1  0 NA\nurban_data_close <- mutate(urban_data, close = as.logical(close))\nunique(urban_data_close$close)## [1]  TRUE FALSE    NA\nurban_data_lgl <- mutate(urban_data, nonclose = (nonclose == 1))\nunique(urban_data_lgl$nonclose)## [1]  TRUE    NA FALSE\nurban_data_lgl2 <- mutate(urban_data, close = as.logical(close),\n                      nonclose = as.logical(nonclose))\nurban_data_lgl <- mutate(urban_data, across(c(close, nonclose, vector, intermediate), as.logical))\nmutate(urban_data, udiff_1000 = na_if(udiff_1000, 0))## # A tibble: 516 × 44\n##    study TITLE      AUTHORS  YEAR JOURNAL health condition toxtype ptype stress2\n##    <dbl> <chr>      <chr>   <dbl> <chr>   <chr>  <chr>     <chr>   <chr> <chr>  \n##  1  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  2  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  3  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Rich… <NA>   \n##  4  1236 Ectoparas… Webste…  2014 Wildli… condi… Adjusted  <NA>    <NA>  <NA>   \n##  5  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Inte… <NA>   \n##  6  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Inte… <NA>   \n##  7  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  8  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  9  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n## 10  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n## # ℹ 506 more rows\n## # ℹ 34 more variables: SAMPLE_SIZE <dbl>, EFFECT_DIRECTION <dbl>, pval <dbl>,\n## #   r <dbl>, yi <dbl>, vi <dbl>, rlower <dbl>, rupper <dbl>, yir <dbl>,\n## #   ott_id <dbl>, host.species <chr>, host.class <chr>, aqterr <chr>,\n## #   parasite2 <chr>, close <dbl>, nonclose <dbl>, vector <dbl>,\n## #   intermediate <dbl>, routes <dbl>, mroute <chr>, mlat <dbl>, mlon <dbl>,\n## #   udiff_1000 <dbl>, udiff_10000 <dbl>, uchange_1000 <dbl>, …\nmutate(urban_data, udiff_1000 = if_else(udiff_1000 == 0, NA, udiff_1000))## # A tibble: 516 × 44\n##    study TITLE      AUTHORS  YEAR JOURNAL health condition toxtype ptype stress2\n##    <dbl> <chr>      <chr>   <dbl> <chr>   <chr>  <chr>     <chr>   <chr> <chr>  \n##  1  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  2  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  3  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Rich… <NA>   \n##  4  1236 Ectoparas… Webste…  2014 Wildli… condi… Adjusted  <NA>    <NA>  <NA>   \n##  5  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Inte… <NA>   \n##  6  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Inte… <NA>   \n##  7  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  8  1236 Ectoparas… Webste…  2014 Wildli… paras… <NA>      <NA>    Prev… <NA>   \n##  9  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n## 10  1326 Effects o… Hargit…  2016 Scienc… toxic… <NA>      metal   <NA>  <NA>   \n## # ℹ 506 more rows\n## # ℹ 34 more variables: SAMPLE_SIZE <dbl>, EFFECT_DIRECTION <dbl>, pval <dbl>,\n## #   r <dbl>, yi <dbl>, vi <dbl>, rlower <dbl>, rupper <dbl>, yir <dbl>,\n## #   ott_id <dbl>, host.species <chr>, host.class <chr>, aqterr <chr>,\n## #   parasite2 <chr>, close <dbl>, nonclose <dbl>, vector <dbl>,\n## #   intermediate <dbl>, routes <dbl>, mroute <chr>, mlat <dbl>, mlon <dbl>,\n## #   udiff_1000 <dbl>, udiff_10000 <dbl>, uchange_1000 <dbl>, …\n# Create a vector\nspecies <- c(\"elephant\", \"snow leopard\", \"indian leopard\", \"sloth bear\", \"bengal tiger\")\n# Check whether these animals are cats\nif_else(species %in% c(\"snow leopard\", \"indian leopard\", \"bengal tiger\"), \"cat\" , \"not a cat\")## [1] \"not a cat\" \"cat\"       \"cat\"       \"not a cat\" \"cat\"\n# Create a vector\nnums <- c(50, 194, 281, 92)\n# Check if each element is even or odd\nif_else(nums %% 2 == 0,\"even\",\"odd\")## [1] \"even\" \"even\" \"odd\"  \"even\"\n# Unlike `ifelse()`, `if_else()` preserves types\n# This example comes from the help page for if_else\nx <- factor(c(\"a\", \"i\", \"e\", \"f\", \"g\", \"c\", \"i\", \"b\"))\nifelse(x %in% c(\"a\", \"b\", \"c\"), x, NA)## [1]  1 NA NA NA NA  3 NA  2\nif_else(x %in% c(\"a\", \"b\", \"c\"), x, NA)## [1] a    <NA> <NA> <NA> <NA> c    <NA> b   \n## Levels: a b c e f g i"},{"path":"filter-select-mutate.html","id":"sorting-data-tables","chapter":"6 Data Manipulation with R, Part 1","heading":"6.4.4 Sorting data tables","text":"many cases, order data table important; information regardless row number. Sorting ordering tables can useful filtering calculating columns. dplyr function arrange() sort data frame column:arrange() can take multiple column names, case data frame sorted first first column. , values duplicated column, rows sorted within group second column, :base R function sort order vector:","code":"\nhead(select(urban_data, study, AUTHORS, r))## # A tibble: 6 × 3\n##   study AUTHORS              r\n##   <dbl> <chr>            <dbl>\n## 1  1236 Webster et al.  0     \n## 2  1236 Webster et al. -0.229 \n## 3  1236 Webster et al. -0.0770\n## 4  1236 Webster et al.  0.200 \n## 5  1236 Webster et al. -0.301 \n## 6  1236 Webster et al.  0.063\nr_ordered <- arrange(urban_data, r)\nhead(select(r_ordered, study, AUTHORS, r))## # A tibble: 6 × 3\n##   study AUTHORS                 r\n##   <dbl> <chr>               <dbl>\n## 1  3913 Zapata et al.      -0.997\n## 2  3913 Zapata et al.      -0.984\n## 3   521 Abu El-Saad et al. -0.982\n## 4   851 Bilandzic et al.   -0.979\n## 5   521 Abu El-Saad et al. -0.977\n## 6   521 Abu El-Saad et al. -0.975\nauthor_ordered <- arrange(urban_data, AUTHORS)\nhead(select(author_ordered, study, AUTHORS, r))## # A tibble: 6 × 3\n##   study AUTHORS                 r\n##   <dbl> <chr>               <dbl>\n## 1   521 Abu El-Saad et al. -0.922\n## 2   521 Abu El-Saad et al. -0.963\n## 3   521 Abu El-Saad et al. -0.378\n## 4   521 Abu El-Saad et al. -0.900\n## 5   521 Abu El-Saad et al. -0.974\n## 6   521 Abu El-Saad et al. -0.952\nauthor_r_ordered <- arrange(urban_data, AUTHORS, r)\nhead(select(author_r_ordered, study, AUTHORS, r))## # A tibble: 6 × 3\n##   study AUTHORS                 r\n##   <dbl> <chr>               <dbl>\n## 1   521 Abu El-Saad et al. -0.982\n## 2   521 Abu El-Saad et al. -0.977\n## 3   521 Abu El-Saad et al. -0.975\n## 4   521 Abu El-Saad et al. -0.974\n## 5   521 Abu El-Saad et al. -0.963\n## 6   521 Abu El-Saad et al. -0.952\nsort(x)## [1] a b c e f g i i\n## Levels: a b c e f g i"},{"path":"filter-select-mutate.html","id":"pipes","chapter":"6 Data Manipulation with R, Part 1","heading":"6.5 Pipes","text":"want bunch operations order, example filtering data creating new columns. basic way create intermediate objects:also nest functions, can see gets unwieldy quickly:tidyverse provides powerful way tie squence actions together: pipe (%>%). Pipes can initially intimidating (% ?!) means necessary use, can make code neat easier understand.can read pipe : take urban data, take rows mammals, convert transmission mode columns logical. pipe takes output previous line feeds input next one. Notice don’t repeat name data object,data whatever pipe feeding function. \nseveral advantages using pipes compared traditional syntax. First, \nusing pipe example , avoided saving intermediate objects (e.g.,\nno_pkey) environment: saved final result wanted. Second,\ntyped less. Third, code readable syntax code\nreflects logical structure . shortcut inserting pipe\nCtrl + Shift + M Windows Cmd + Shift + M Mac.","code":"\nurban_data_mamm <- filter(urban_data, host.class == \"mammals\")\nurban_data_mamm <- mutate(urban_data_mamm, across(c(close, nonclose, vector, intermediate), as.logical))\nurban_data_mamm <- filter(mutate(urban_data_mamm, across(c(close, nonclose, vector, intermediate), as.logical)), host.class == \"mammals\")\nurban_data_mamm <- urban_data %>%\n  filter(host.class == \"mammals\") %>%\n  mutate(across(c(close, nonclose, vector, intermediate), as.logical))"},{"path":"nums-chrs.html","id":"nums-chrs","chapter":"7 Numbers, Characters, and Factors in R","heading":"7 Numbers, Characters, and Factors in R","text":"","code":""},{"path":"nums-chrs.html","id":"objectives-4","chapter":"7 Numbers, Characters, and Factors in R","heading":"7.1 Objectives","text":"Perform basic functions numeric integer objects columnsManipulate character/string objects columnsCreate convert factorsIn lesson following one dates times, learn basic principles simple R objects, apply columns data frames build knowledge data management (mutate, etc.).","code":""},{"path":"nums-chrs.html","id":"additional-reading-4","chapter":"7 Numbers, Characters, and Factors in R","heading":"7.2 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 13: Numbers. Available: https://r4ds.hadley.nz/numbers.htmlHadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 14: Strings. Available: https://r4ds.hadley.nz/strings.htmlHadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 16: Factors. Available: https://r4ds.hadley.nz/factors.html","code":""},{"path":"nums-chrs.html","id":"numbers-integers-and-numeric-variables","chapter":"7 Numbers, Characters, and Factors in R","heading":"7.3 Numbers: integers and numeric variables","text":"R, numbers come two flavors: integers double (called “numeric”). Integers non-decimal, negative non-negative numbers. Although integers , extent, subset numbers, sometimes act differently coding. example, functions take integers inputs.Performing math integers sometimes automatically convert double:might expect R return NA try convert decimal integer, instead truncates:distinction integers numeric objects becomes important using arguments functions. example, function round() takes argument digits telling many digits round . example:contrast, round(12.2918, digits = 1.2) doesn’t make sense (though R still return value, case without error message). can become important using objects/variables arguments functions:integers numeric variables, can perform basic arithmetic:can use mathematical operations R numbers vectors numbers. examples include:","code":"\nnum1 <- 10\nclass(num1)## [1] \"numeric\"\nnum2 <- as.integer(10)\nclass(num2)## [1] \"integer\"\nnum3 <- 10L\nclass(num3)## [1] \"integer\"\nclass(num2/3)## [1] \"numeric\"\nas.integer(2.7)## [1] 2\nround(12.2918, digits = 0)## [1] 12\nround(12.2918, digits = 3)## [1] 12.292\nround(12.2918, digits = -1)## [1] 10\nround_val <- 1\nround(12.2918, digits = round_val)## [1] 12.3\n# That was too big, let's make it smaller\nround_val2 <- round_val/2\nround(12.2918, digits = round_val2)## [1] 12.3\n12 + 10 + 4## [1] 26\n12 - 10 - 4## [1] -2\n12 * 10 * 4## [1] 480\nvals <- c(12,10,4)\nsum(vals)## [1] 26\nprod(vals)## [1] 480\ndiff(vals) #Nope, this is not the same as the arithmetic above. What is it doing?## [1] -2 -6\nsqrt()\nmean()\nmedian()\nabs()"},{"path":"nums-chrs.html","id":"parsing-numbers","chapter":"7 Numbers, Characters, and Factors in R","heading":"7.3.1 Parsing numbers","text":"Sometimes, import numeric data, doesn’t read correctly ends string/character instead number. usually typos oddities raw data. readr tidyverse package provides parse_number() function help issues., please don’t enter data way! example, data different units, parse_number know . go strings learn another way deal irregularities data entry.","code":"\nlibrary(tidyverse)## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nnums_in <- c(\"10 days\", \"2 days\", \"<1 days\", \"190d\")\nreadr::parse_number(nums_in)## [1]  10   2   1 190"},{"path":"nums-chrs.html","id":"precision-and-comparing-numbers","chapter":"7 Numbers, Characters, and Factors in R","heading":"7.3.2 Precision and comparing numbers","text":"previous lesson, learned equalities (== !=). can used numbers, :However, limited degree precision doubles, can take fixed amount memory. example, numbers inifite decimal places (e.g., \\(\\sqrt{2}\\), \\(\\pi\\)) infinite.Instead, can use dplyr::near(), uses system’s default precision determine equality:","code":"\nnum <- 4/2\nnum == 2## [1] TRUE\nsqrt2 <- sqrt(2)\nsqrt2## [1] 1.414214\ntwo <- sqrt(2)^2\ntwo## [1] 2\ntwo == 2## [1] FALSE\ndplyr::near(two, 2)## [1] TRUE"},{"path":"nums-chrs.html","id":"characters","chapter":"7 Numbers, Characters, and Factors in R","heading":"7.4 Characters","text":"Characters (“strings”) seem simple surface: extent, exactly appear . , dealing data inputs outputs can become lot easier know manipulate strings automatically. tidyverse package called stringr provides lot useful functions . Many present base R, slightly less intuitive function names syntax.","code":""},{"path":"nums-chrs.html","id":"creating-strings-and-using-special-characters","chapter":"7 Numbers, Characters, and Factors in R","heading":"7.4.1 Creating strings and using special characters","text":"used strings : just characters enclosed quotes:create quotes within string, use combination single quotes ('') double quotes (\"\"):forget close quote, won’t get error: instead, ’ll see + won’t able anything else, code entered part string:can’t figure quote close, press Escape cancel.characters act unusually within strings, usually also code something else. example, backslash \\ escape character, meaning R now ignore programmatic meaning whatever comes . can useful, example want include single quotation mark within string:Backslashes helpful want insert special characters, example Greek letters figure table legends, non-English characters. can looking Unicode character codes. example Unicode character beta U+03B2. advanced topic, useful keep mind:want include backslash string, need escape :probably noticed used cat() instead print() changed way string showed . cat() prints text screen, print() (just object name alone) show actual object. ’s subtle difference important cases.Sometimes, might want create string multiple strings. example, might two vectors strings want combine:’ve put together corresponding authors years. can also single value:picky, nest functions get rid space period:","code":"\nstring1 <- \"string\"\nstring_vect <- c(\"hello\", \"I\", \"am\", \"a\", \"vector\")\"I said, 'I did not know you could do this'\"\n'\"You totally can\", she said, \"and it works either way\"'\n\"\"Just don't try this\"\"## Error in parse(text = input): <text>:3:3: unexpected symbol\n## 2: '\"You totally can\", she said, \"and it works either way\"'\n## 3: \"\"Just\n##      ^> \"I forgot to close my quotation marks\n+ \n+ \nquotestring <- \"This is a single quotation mark: \\\", but I made it work!\"\nquotestring## [1] \"This is a single quotation mark: \\\", but I made it work!\"\ncat(quotestring)## This is a single quotation mark: \", but I made it work!\n\"\\u03b2\"## [1] \"β\"\ncat(\"Backslash \\\\\")## Backslash \\\ncolors <- c(\"yellow\", \"orange\", \"purple\")\nfruits <- c(\"banana\", \"tangerine\", \"blueberry\")\nstr_c(colors, fruits, sep = \" \")## [1] \"yellow banana\"    \"orange tangerine\" \"purple blueberry\"\n# Equivalent \"base R\" way of doing this:\n#paste(colors, fruits)\nstr_c(\"This is a\", colors, fruits, \".\", sep = \" \")## [1] \"This is a yellow banana .\"    \"This is a orange tangerine .\"\n## [3] \"This is a purple blueberry .\"\nstr_c(\"This is a \", str_c(colors, fruits, sep = \" \"), \".\")## [1] \"This is a yellow banana.\"    \"This is a orange tangerine.\"\n## [3] \"This is a purple blueberry.\""},{"path":"nums-chrs.html","id":"manipulating-strings-with-stringr","chapter":"7 Numbers, Characters, and Factors in R","heading":"7.4.2 Manipulating strings with stringr","text":"Sometimes, character strings exist form want, want create new strings old ones. example, take urban wildlife data set:host.species variable includes genus species. just want genus? possible functions come : str_split() cousin, str_split_fixed()Now list (oops, haven’t gotten yet!) vectors. element list now genus species separated. many cases, can use str_split_fixed(), instead return matrix. just requires element number elements output:complication imagine case subspecies sometimes others:can also change capitalization using functions like str_to_lower(), str_to_upper(), str_to_sentence().stringr’s functions start str_, ’re looking new function something want , can type str_ get suggestions:\nFigure 7.1: Autofill stringr functions\n","code":"\nurban_data <- read_csv(\"data/raw/Murray-Sanchez_urban-wildlife.csv\")## Rows: 516 Columns: 42\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (14): TITLE, AUTHORS, JOURNAL, health, condition, toxtype, ptype, stress...\n## dbl (28): study, YEAR, SAMPLE_SIZE, EFFECT_DIRECTION, pval, r, yi, vi, rlowe...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nhead(urban_data$host.species)## [1] \"Trichosurus_vulpecula\" \"Trichosurus_vulpecula\" \"Trichosurus_vulpecula\"\n## [4] \"Trichosurus_vulpecula\" \"Trichosurus_vulpecula\" \"Trichosurus_vulpecula\"\nsplitting_species <- str_split(urban_data$host.species, pattern = \"_\")\nhead(splitting_species)## [[1]]\n## [1] \"Trichosurus\" \"vulpecula\"  \n## \n## [[2]]\n## [1] \"Trichosurus\" \"vulpecula\"  \n## \n## [[3]]\n## [1] \"Trichosurus\" \"vulpecula\"  \n## \n## [[4]]\n## [1] \"Trichosurus\" \"vulpecula\"  \n## \n## [[5]]\n## [1] \"Trichosurus\" \"vulpecula\"  \n## \n## [[6]]\n## [1] \"Trichosurus\" \"vulpecula\"\nsplitting_species <- str_split_fixed(urban_data$host.species, pattern = \"_\", n = 2)\nhead(splitting_species)##      [,1]          [,2]       \n## [1,] \"Trichosurus\" \"vulpecula\"\n## [2,] \"Trichosurus\" \"vulpecula\"\n## [3,] \"Trichosurus\" \"vulpecula\"\n## [4,] \"Trichosurus\" \"vulpecula\"\n## [5,] \"Trichosurus\" \"vulpecula\"\n## [6,] \"Trichosurus\" \"vulpecula\"\nspecies <- c(\"Anas acuta\", \"Anas crecca\", \"Anas crecca carolinensis\")\nstr_split_fixed(species, \" \", 2)##      [,1]   [,2]                 \n## [1,] \"Anas\" \"acuta\"              \n## [2,] \"Anas\" \"crecca\"             \n## [3,] \"Anas\" \"crecca carolinensis\"\nstr_split_fixed(species, \" \", 3)##      [,1]   [,2]     [,3]          \n## [1,] \"Anas\" \"acuta\"  \"\"            \n## [2,] \"Anas\" \"crecca\" \"\"            \n## [3,] \"Anas\" \"crecca\" \"carolinensis\"\nstr_to_lower(species)## [1] \"anas acuta\"               \"anas crecca\"             \n## [3] \"anas crecca carolinensis\""},{"path":"nums-chrs.html","id":"factors-characterinteger-hybrids","chapter":"7 Numbers, Characters, and Factors in R","heading":"7.5 Factors: character/integer hybrids","text":"Factors used categorical variables, .e. variables known set possible values. common categorical variables months year days week; scientific studies, site names individual IDs common applications factors. Factors useful limit number values variable can take (provide errors/warnings violated) also can sorted non-alphabetical/non-numerical order. possible values called levels R. example:levels need appear vector, vector take values levels:ever need get set levels, can levels(). sometimes helpful filtered data levels still present:hood, R considers factors integers, corresponding levels. example:Remember ever factor (example, site number!) otherwise appears integer:One way go get actual site IDs back factor go character type, character longer levels associated :","code":"\nsurvey_months <- c(\"January\",\"February\",\"April\",\"May\",\"July\",\"August\")\nsort(survey_months)## [1] \"April\"    \"August\"   \"February\" \"January\"  \"July\"     \"May\"\nsurvey_months_fct <- factor(survey_months, levels = survey_months)\nsurvey_months_fct## [1] January  February April    May      July     August  \n## Levels: January February April May July August\nsurvey_months_fct2 <- factor(survey_months, levels = month.name) #month.name is conveniently built into R\nsurvey_months_fct2## [1] January  February April    May      July     August  \n## 12 Levels: January February March April May June July August ... December\nsurvey_months_fct2[2] <- \"Tuesday\"## Warning in `[<-.factor`(`*tmp*`, 2, value = \"Tuesday\"): invalid factor level,\n## NA generated\nsurvey_months_fct2## [1] January <NA>    April   May     July    August \n## 12 Levels: January February March April May June July August ... December\nlevels(survey_months_fct2)##  [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"     \n##  [7] \"July\"      \"August\"    \"September\" \"October\"   \"November\"  \"December\"\nas.integer(survey_months_fct)## [1] 1 2 3 4 5 6\nas.integer(survey_months_fct2)## [1]  1 NA  4  5  7  8\nsite_ids <- c(1, 3, 4, 9, 12, 15)\nsite_ids_fct <- as.factor(site_ids)\nsite_ids_fct## [1] 1  3  4  9  12 15\n## Levels: 1 3 4 9 12 15\nas.integer(site_ids_fct)## [1] 1 2 3 4 5 6\nas.character(site_ids_fct)## [1] \"1\"  \"3\"  \"4\"  \"9\"  \"12\" \"15\"\nas.integer(as.character(site_ids_fct))## [1]  1  3  4  9 12 15"},{"path":"lubridate.html","id":"lubridate","chapter":"8 Dates and Times in R","heading":"8 Dates and Times in R","text":"Much lesson based materials WILD 6900: Tools Reproducible Science, Spring 2021, Utah State University, Dr. Simona Picardi, also published CC-4.0 license.","code":""},{"path":"lubridate.html","id":"objectives-5","chapter":"8 Dates and Times in R","heading":"8.1 Objectives","text":"Understand challenges considerations working date/time dataBe able convert date time formats RBe able extract portions dates times vectorsPerform basic arithmetic dates times","code":""},{"path":"lubridate.html","id":"additional-reading-5","chapter":"8 Dates and Times in R","heading":"8.2 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 17: Dates times. Available: https://r4ds.hadley.nz/datetimes.html","code":""},{"path":"lubridate.html","id":"why-are-dates-and-times-unique","chapter":"8 Dates and Times in R","heading":"8.3 Why are dates and times unique?","text":"Dates times can headache work . less numbers, don’t follow regular number rules. ’s just handful things make dates times different:’s 61 60 working seconds minutes;’s 25 24 working hours;’s 13 12 working months;years 365-days long, 366-days long;time means something different depending time zone;time means something different standard daylight savings time. daylight savings time starts different day year different day different places ().Keeping track rules manually nightmare, especially working large datasets.\nFigure 3.1: Ask R year 0 , tell 1970. (https://xkcd.com/376/)\n","code":""},{"path":"lubridate.html","id":"dates-and-times-in-r","chapter":"8 Dates and Times in R","heading":"8.4 Dates and times in R","text":"basic classes dates R POSIXct POSIXlt (classes ’ve learned integers, characters, etc.). POSIXct includes time, whereas POSIXlt just date. Although POSIXt dates usually represented date format (e.g., “2025-08-13 09:35:00 EDT”), stored numbers hood, based number seconds since midnight January 1, 1970 (negative numbers also supported represent days date). Let’s play :date just character, ’s specified. hand:Besides POSIXct POSIXlt, R also support data type called Date. equivalent Excel’s handling dates, .e., number days since 1/1/1970:can see perform differently ask R convert numbers:can also see date_pox associated time zone (date_Date ). default, time zone computer (R can find).useful date functions R include finding current date time:","code":"\ndate_chr <- \"2025-09-01\"\nclass(date_chr)## [1] \"character\"\ndate_pox <- as.POSIXlt(date_chr)\ndate_pox## [1] \"2025-09-01 EDT\"\nclass(date_pox)## [1] \"POSIXlt\" \"POSIXt\"\ndate_Date <- as.Date(date_chr)\ndate_Date## [1] \"2025-09-01\"\nclass(date_Date)## [1] \"Date\"\nas.numeric(date_chr)## Warning: NAs introduced by coercion## [1] NA\nas.numeric(date_pox)## [1] 1756699200\nas.numeric(date_Date)## [1] 20332\nSys.timezone()## [1] \"America/New_York\"\nSys.Date()## [1] \"2025-08-13\"\nSys.time() #careful, this is not the same as system.time. We might get to that one later!## [1] \"2025-08-13 15:38:32 EDT\""},{"path":"lubridate.html","id":"formatting-dates","chapter":"8 Dates and Times in R","heading":"8.4.1 Formatting dates","text":"U.S. commonly write dates month/day/year, without leading zeroes, “standard” international format year-month-day leading zeroes, encounter problems R assume understand U.S. dates:fix , can use format argument tell R format input:Now R read correctly, output date “standard” format.side note, one reason can helpful get used entering dates format. Another big benefit sorting easier: alphabetical, numerical, time orders line year first, month first.","code":"\nas.Date(\"4/15/2025\")## Error in charToDate(x): character string is not in a standard unambiguous format\nas.Date(\"1/11/2025\")## [1] \"0001-11-20\"\nd <- as.Date(\"01/11/2025\", format = \"%m/%d/%Y\")\nd## [1] \"2025-01-11\""},{"path":"lubridate.html","id":"the-lubridate-package","chapter":"8 Dates and Times in R","heading":"8.5 The lubridate package","text":"tidyverse way working dates times lubridate package, lubridate part core tidyverse, need install . Working dates times using lubridate slightly easier base R streamlines processes, including parsing dates times character strings extracting information (e.g., year) dates.","code":"\ninstall.packages(\"lubridate\")"},{"path":"lubridate.html","id":"parsing-dates-from-characters","chapter":"8 Dates and Times in R","heading":"8.5.1 Parsing dates from characters","text":"Lubridate’s functions parsing dates :separator (/ -) matter, neither leading zeroes (unless don’t use separator). example, example , use:Notice functions lubridate assume default time zone Coordinated Universal Time (UTC), local time zone! UTC time zone Greenwich Mean Time (GMT), without daylight savings. reproducible default, result exactly regardless user sitting.might expect, ’s important make sure format input matches format function:Note provides warning, error outputs NA. feature can useful, example data column missing information, can also dangerous (imagine whole column NAs missing values typo data entry).saw base R function, functions (ymd(), mdy(), etc.) tell lubridate read format input; format output always :","code":"\nymd()\nmdy()\ndmy()\n\nymd_hms()\nmdy_hms()\ndmy_hms()\n\nhms()\nhm()\nms()\nlibrary(lubridate)## \n## Attaching package: 'lubridate'## The following objects are masked from 'package:base':\n## \n##     date, intersect, setdiff, union\nmdy(\"01/11/2025\")## [1] \"2025-01-11\"\nymd_hms(\"2021-01-09 00:01:23\")## [1] \"2021-01-09 00:01:23 UTC\"\nmdy(\"01112025\")## [1] \"2025-01-11\"\nlubridate::mdy(\"2028-01-01\")## Warning: All formats failed to parse. No formats found.## [1] NA\nclass(mdy(\"01/11/2025\"))## [1] \"Date\"\nclass(ymd_hms(\"2021-01-09 00:01:23\"))## [1] \"POSIXct\" \"POSIXt\""},{"path":"lubridate.html","id":"extracting-parts-of-dates","chapter":"8 Dates and Times in R","heading":"8.5.2 Extracting parts of dates","text":"lubridate also provides functions extract components date:","code":"\nyear()\nmonth()\nday()\n\nhour()\nminute()\nsecond()\n\nwday() #day of the week\nyday() #day of the year\nts <- ymd_hms(\"2021-01-09 00:01:23\")\nyear(ts)## [1] 2021\nhour(ts)## [1] 0"},{"path":"lubridate.html","id":"calculations-with-dates","chapter":"8 Dates and Times in R","heading":"8.6 Calculations with dates","text":"Often, want perform calculations dates, like adding subtracting time figuring time . Often possible simple mathematical symbols:careful; object types must match:function difftime better way , can accommodate different object types. also allows specify units output:specify time d1, just date. Based results difftime, time R use calculation?can also add subtract time dates:Notice adding 1 different things two cases: added day d1 second d2! precision two objects different, ’s intuitive! careful, can instead specify units number following lubridate functions:example:Notice changing year minute component dates, aren’t accounting irregularities, like leap years months different lengths. Technically, year (average) 365 days + 6 hours. won’t go , lubridate also provides functions (e.g., using dyears() instead years()).Finally, might want round dates. , use similar functions numbers, floor_date(), ceiling_date(), round_date(), instead specifying number digits, specify time precision:","code":"\nd1 <- ymd(\"2022-01-14\")\nd2 <- ymd_hms(\"2022-01-15 10:06:00\")\nd3 <- ymd(\"2022-01-16\")\n\nd3 - d1## Time difference of 2 days\nd1 - d2## Warning: Incompatible methods (\"-.Date\", \"-.POSIXt\") for \"-\"## [1] \"-4494282-06-17\"\ndifftime(d2, d1)## Time difference of 1.420833 days\ndifftime(d2, d1, units = \"hours\")## Time difference of 34.1 hours\nd1 + 1## [1] \"2022-01-15\"\nd2 + 1## [1] \"2022-01-15 10:06:01 UTC\"\nseconds()\nminutes()\nhours()\ndays()\nweeks()\nmonths()\nyears()\nd1 + years(1)## [1] \"2023-01-14\"\nd1 + minutes(10)## [1] \"2022-01-14 00:10:00 UTC\"\nround_date(d1)## [1] \"2022-01-14 UTC\"\nround_date(d1, unit = \"year\")## [1] \"2022-01-01\"\nround_date(d2, unit = \"day\")## [1] \"2022-01-15 UTC\""},{"path":"lubridate.html","id":"time-zones","chapter":"8 Dates and Times in R","heading":"8.7 Time zones","text":"noted , new time date created lubridate default UTC. specify time zone, can use tz argument:can get list time zones :can also change time zone existing object. often useful read data time zone already, R doesn’t know . example:Notice time time zone different, actual moment time changed. can use with_tz() convert across time zones keeping moment , example make plots local time data measured UTC:","code":"\nd2 <- ymd_hms(\"2022-01-15 10:06:00\", tz = \"America/New_York\")\ntzs <- OlsonNames()\nhead(tzs)## [1] \"Africa/Abidjan\"     \"Africa/Accra\"       \"Africa/Addis_Ababa\"\n## [4] \"Africa/Algiers\"     \"Africa/Asmara\"      \"Africa/Asmera\"\nd4 <- ymd_hms(\"2025-02-05 15:40:29\")\ntz(d4) <- \"America/New_York\"\nd4## [1] \"2025-02-05 15:40:29 EST\"\nd4 <- ymd_hms(\"2025-02-05 15:40:29\")\nwith_tz(d4, \"America/New_York\")## [1] \"2025-02-05 10:40:29 EST\""},{"path":"manipulation.html","id":"manipulation","chapter":"9 Data Manipulation with R, Part 2","heading":"9 Data Manipulation with R, Part 2","text":"Much lesson draws Carpentries’ Data Analysis Visualization R Ecologists workshop, published CC-4.0 license.","code":""},{"path":"manipulation.html","id":"objectives-6","chapter":"9 Data Manipulation with R, Part 2","heading":"9.1 Objectives","text":"able use split-apply-combine approach summarize data setsUnderstand augment datasets, adding observations adding variablesUnderstand different types joins relates","code":""},{"path":"manipulation.html","id":"additional-reading-6","chapter":"9 Data Manipulation with R, Part 2","heading":"9.2 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 3: Data transformation, sections 3.5-3.7. Available: https://r4ds.hadley.nz/data-transform.htmlHadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 5: Data tidying. Available: https://r4ds.hadley.nz/data-transform.html","code":""},{"path":"manipulation.html","id":"grouping-and-summarizing-data","chapter":"9 Data Manipulation with R, Part 2","heading":"9.3 Grouping and summarizing data","text":"One common tasks data exploration summarizing data. example, might want know mean response variable across treatment, many samples taken given day, . dplyr allows us easily summarize data combining functions group_by() summarize(). example:end mean value r host group number records group. common function use grouping n(), gives current group size. common summary functions include:n_distinct(), gives number unique values group takes column name argument;quantitative summaries, like mean(), median(), sd(), sum();","code":"\nlibrary(tidyverse)## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nurban_data <- read_csv(\"data/raw/Murray-Sanchez_urban-wildlife.csv\")## Rows: 516 Columns: 42\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (14): TITLE, AUTHORS, JOURNAL, health, condition, toxtype, ptype, stress...\n## dbl (28): study, YEAR, SAMPLE_SIZE, EFFECT_DIRECTION, pval, r, yi, vi, rlowe...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nurban_data %>%\n  group_by(host.class) %>%\n  summarize(mean_r = mean(r, na.rm=T), n = n())## # A tibble: 5 × 3\n##   host.class     mean_r     n\n##   <chr>           <dbl> <int>\n## 1 birds         -0.141    159\n## 2 fish          -0.216     92\n## 3 herpetofauna  -0.137     27\n## 4 invertebrates -0.400     43\n## 5 mammals        0.0232   195\nurban_data %>%\n  group_by(host.class) %>%\n  summarize(mean_r = mean(r, na.rm=T), n = n(), n_studies = n_distinct(study))## # A tibble: 5 × 4\n##   host.class     mean_r     n n_studies\n##   <chr>           <dbl> <int>     <int>\n## 1 birds         -0.141    159        46\n## 2 fish          -0.216     92         8\n## 3 herpetofauna  -0.137     27         8\n## 4 invertebrates -0.400     43        10\n## 5 mammals        0.0232   195        35"},{"path":"manipulation.html","id":"combining-and-augmenting-data-sets","chapter":"9 Data Manipulation with R, Part 2","heading":"9.4 Combining and augmenting data sets","text":"Often, multiple data sets relate one way another, want combine multiple sources data. example, might separate data sheets multiple field seasons want combine . , might one data table describes characteristics plots one describes characteristics trees, want add plot information tree.","code":""},{"path":"manipulation.html","id":"binding-rows-and-columns","chapter":"9 Data Manipulation with R, Part 2","heading":"9.4.1 Binding rows and columns","text":"Adding (“binding”) rows columns easiest way add data data frame. example, two separate data sets, can add rows bind_rows:bind_rows looks column names know match data. great columns different orders, careful column names:can also add information bind_cols, though joins () usually better way add columns data set. bind_cols also useful creating new data frames vectors:","code":"\nds1 <- data.frame(plot = 1:10, observer = \"Me\", n_obs = sample(1:100, 10), date = \"2024-04-01\")\nds2 <- data.frame(plot = 1:10, observer = \"You\", n_obs = sample(1:100, 10), date = \"2025-01-01\")\n\nds_full <- bind_rows(ds1, ds2)\nnrow(ds_full)## [1] 20\nhead(ds_full)##   plot observer n_obs       date\n## 1    1       Me    58 2024-04-01\n## 2    2       Me    77 2024-04-01\n## 3    3       Me    85 2024-04-01\n## 4    4       Me    62 2024-04-01\n## 5    5       Me    36 2024-04-01\n## 6    6       Me     3 2024-04-01\ntail(ds_full)##    plot observer n_obs       date\n## 15    5      You    59 2025-01-01\n## 16    6      You    76 2025-01-01\n## 17    7      You    75 2025-01-01\n## 18    8      You    83 2025-01-01\n## 19    9      You   100 2025-01-01\n## 20   10      You    72 2025-01-01\nds1 <- data.frame(plot = 1:10, observer = \"Me\", n_obs = sample(1:100, 10))\nds2 <- data.frame(Plot = 1:10, obs = \"You\", N = sample(1:100, 10))\n\nds_full <- bind_rows(ds1, ds2)\nnrow(ds_full)## [1] 20\nhead(ds_full)##   plot observer n_obs Plot  obs  N\n## 1    1       Me    54   NA <NA> NA\n## 2    2       Me    44   NA <NA> NA\n## 3    3       Me     7   NA <NA> NA\n## 4    4       Me    33   NA <NA> NA\n## 5    5       Me    46   NA <NA> NA\n## 6    6       Me    61   NA <NA> NA\nplots <- c(1:10)\nobservers <- rep(\"Me\", 10)\nN <- sample(1:100, 10)\n\nds1 <- bind_cols(plot = plots, observer = observers, n_obs = N)"},{"path":"manipulation.html","id":"joins","chapter":"9 Data Manipulation with R, Part 2","heading":"9.4.2 Joins","text":"several types join. common types left join, inner join, full join. understand terminology, consider : whenever joining two tables, first table mention (one ’re joining) called left table, whereas second table (one ’re joining first) called right table. left join, keep records left table add information right table whenever ’s matching row. full join means retain rows tables, matching whenever possible. inner join means retain rows match two tables.Let’s practice Murray et al. data. First, need download extra data add. EltonTraits database provides foraging attributes body mass birds mammals. might interesting, example see species’ responses urbanization vary depending body size foraging traits.can little tricky: EltonTraits Murray et al. database use different taxonomies, birds urban_birds aren’t EltonTraits. really use data need correct discrepancies, now help illustrate different types joins.Left joins probably common type use, help add new information reference data set.argument second-trickiest part join (trickiest part making sure expected). , specify want match values column host.species first data frame values column Scientific second data set. tidyverse join functions automatically use columns names don’t specify . specify single character, look columns name data sets. Finally, can specify multiple columns (example, study design block nested within plot wanted match ).inner join similar, eliminate species EltonTraits, present data sets:full join helpful want include effect sizes trait information single data set, regardless whether information:","code":"\nelton <- read_csv(\"data/raw/EltonTraits/BirdFuncDat.csv\")## Rows: 10205 Columns: 40\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (17): SpecID, PassNonPass, IOCOrder, BLFamilyLatin, BLFamilyEnglish, Tax...\n## dbl (23): BLFamSequID, Diet-Inv, Diet-Vend, Diet-Vect, Diet-Vfish, Diet-Vunk...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nurban_birds <- filter(urban_data, host.class == \"birds\")\n# Which birds are missing?\nurban_birds %>%\n  filter(!host.species %in% elton$Scientific) %>%\n  select(host.species)## # A tibble: 9 × 1\n##   host.species     \n##   <chr>            \n## 1 Abrornis_inornata\n## 2 Kieneria_aberti  \n## 3 Kieneria_aberti  \n## 4 Kieneria_aberti  \n## 5 Kieneria_aberti  \n## 6 Kieneria_aberti  \n## 7 Kieneria_aberti  \n## 8 Kieneria_aberti  \n## 9 Kieneria_aberti\nurban_traits <- left_join(urban_birds, elton, by = c(\"host.species\" = \"Scientific\"))\nncol(urban_birds)## [1] 42\nncol(urban_traits)## [1] 81\nurban_traits <- inner_join(urban_birds, elton, by = c(\"host.species\" = \"Scientific\"))\nnrow(urban_birds)## [1] 159\nnrow(urban_traits)## [1] 150\nurban_traits <- full_join(urban_birds, elton, by = c(\"host.species\" = \"Scientific\"))\nncol(urban_traits)## [1] 81\nnrow(urban_traits)## [1] 10334"},{"path":"manipulation.html","id":"pivoting-between-wide-and-long-format","chapter":"9 Data Manipulation with R, Part 2","heading":"9.5 Pivoting between wide and long format","text":"talked wide long formats discussing data entry spreadsheets, still useful know transform data sets get R. ? Well, sometimes data set isn’t set long form. times, wide form useful visualization making tables.","code":""},{"path":"manipulation.html","id":"long-to-wide","chapter":"9 Data Manipulation with R, Part 2","heading":"9.5.1 Long to wide","text":"Let’s start data set long form: one observation per row, one variable per column. urban wildlife data set follows structure. Let’s say want know many studies per year health metric:present paper, might consider transforming wide form:use pivot_wider() function tidyr package (part tidyverse). id_cols tells function variable use define row new table. names_from defines column long-form data become column names, values_from defines column long-form data used fill columns. Finally, don’t always need values_fill, id-name combination missing original data, tells funciton include new table (default, NA).Pivoting data frames takes practice. One common pitfalls going wide long form id-name combination needs unique value. example, let’s say first summarized data year host habitat:see gave us warning message new columns lists. cells wide data frame now one element (.e., years aquatic terrestrial hosts data given health metric). can fix including aqterr either ID names column:second case, end health habitat data sandwiched together new column names.","code":"\nurban_data %>%\n  group_by(health, YEAR) %>%\n  summarize(n = n())## `summarise()` has grouped output by 'health'. You can override using the\n## `.groups` argument.## # A tibble: 54 × 3\n## # Groups:   health [4]\n##    health     YEAR     n\n##    <chr>     <dbl> <int>\n##  1 condition  1999     6\n##  2 condition  2002     1\n##  3 condition  2003     3\n##  4 condition  2005     2\n##  5 condition  2008     5\n##  6 condition  2010    10\n##  7 condition  2011     4\n##  8 condition  2012    13\n##  9 condition  2013     1\n## 10 condition  2014     3\n## # ℹ 44 more rows\nurban_data %>%\n  group_by(health, YEAR) %>%\n  summarize(n = n()) %>%\n  pivot_wider(id_cols = YEAR, names_from = health, values_from = n, values_fill = 0)## `summarise()` has grouped output by 'health'. You can override using the\n## `.groups` argument.## # A tibble: 20 × 5\n##     YEAR condition parasites stress toxicants\n##    <dbl>     <int>     <int>  <int>     <int>\n##  1  1999         6         0      0         0\n##  2  2002         1         1      2         0\n##  3  2003         3         1      0         5\n##  4  2005         2         1      0         5\n##  5  2008         5        13      4         4\n##  6  2010        10         5      0        36\n##  7  2011         4        44      4         0\n##  8  2012        13        20     15        15\n##  9  2013         1         6      8        18\n## 10  2014         3        46      9         0\n## 11  2016        11        26     12         7\n## 12  2017         1         6      6        61\n## 13  1998         0         3      0         0\n## 14  2000         0         2      1         0\n## 15  2001         0         1      0         0\n## 16  2004         0        11      1         1\n## 17  2006         0         1      0         0\n## 18  2009         0         1      8         0\n## 19  2015         0         6      2        27\n## 20  2007         0         0      1        10\nurban_data %>%\n  group_by(health, YEAR, aqterr) %>%\n  summarize(n = n()) %>%\n  pivot_wider(id_cols = YEAR, names_from = health, values_from = n)## `summarise()` has grouped output by 'health', 'YEAR'. You can override using\n## the `.groups` argument.## Warning: Values from `n` are not uniquely identified; output will contain list-cols.\n## • Use `values_fn = list` to suppress this warning.\n## • Use `values_fn = {summary_fun}` to summarise duplicates.\n## • Use the following dplyr code to identify duplicates.\n##   {data} |>\n##   dplyr::summarise(n = dplyr::n(), .by = c(YEAR, health)) |>\n##   dplyr::filter(n > 1L)## # A tibble: 20 × 5\n## # Groups:   YEAR [20]\n##     YEAR condition parasites stress    toxicants\n##    <dbl> <list>    <list>    <list>    <list>   \n##  1  1999 <int [1]> <NULL>    <NULL>    <NULL>   \n##  2  2002 <int [1]> <int [1]> <int [1]> <NULL>   \n##  3  2003 <int [1]> <int [1]> <NULL>    <int [1]>\n##  4  2005 <int [1]> <int [1]> <NULL>    <int [1]>\n##  5  2008 <int [1]> <int [1]> <int [1]> <int [1]>\n##  6  2010 <int [2]> <int [1]> <NULL>    <int [2]>\n##  7  2011 <int [1]> <int [1]> <int [1]> <NULL>   \n##  8  2012 <int [2]> <int [1]> <int [2]> <int [2]>\n##  9  2013 <int [1]> <int [1]> <int [2]> <int [1]>\n## 10  2014 <int [2]> <int [2]> <int [1]> <NULL>   \n## 11  2016 <int [2]> <int [2]> <int [2]> <int [1]>\n## 12  2017 <int [1]> <int [1]> <int [1]> <int [2]>\n## 13  1998 <NULL>    <int [1]> <NULL>    <NULL>   \n## 14  2000 <NULL>    <int [1]> <int [1]> <NULL>   \n## 15  2001 <NULL>    <int [1]> <NULL>    <NULL>   \n## 16  2004 <NULL>    <int [2]> <int [1]> <int [1]>\n## 17  2006 <NULL>    <int [1]> <NULL>    <NULL>   \n## 18  2009 <NULL>    <int [1]> <int [1]> <NULL>   \n## 19  2015 <NULL>    <int [1]> <int [1]> <int [1]>\n## 20  2007 <NULL>    <NULL>    <int [1]> <int [2]>\nurban_data %>%\n  group_by(health, YEAR, aqterr) %>%\n  summarize(n = n()) %>%\n  pivot_wider(id_cols = c(YEAR, aqterr), names_from = health, values_from = n, values_fill = 0) %>%\n  head()## `summarise()` has grouped output by 'health', 'YEAR'. You can override using\n## the `.groups` argument.## # A tibble: 6 × 6\n## # Groups:   YEAR [6]\n##    YEAR aqterr      condition parasites stress toxicants\n##   <dbl> <chr>           <int>     <int>  <int>     <int>\n## 1  1999 aquatic             6         0      0         0\n## 2  2002 terrestrial         1         1      2         0\n## 3  2003 terrestrial         3         1      0         5\n## 4  2005 terrestrial         2         1      0         5\n## 5  2008 terrestrial         5        13      4         0\n## 6  2010 aquatic             8         0      0         6\nurban_data %>%\n  group_by(health, YEAR, aqterr) %>%\n  summarize(n = n()) %>%\n  pivot_wider(id_cols = YEAR, names_from = c(health, aqterr), values_from = n, values_fill = 0) %>%\n  head()## `summarise()` has grouped output by 'health', 'YEAR'. You can override using\n## the `.groups` argument.## # A tibble: 6 × 9\n## # Groups:   YEAR [6]\n##    YEAR condition_aquatic condition_terrestrial parasites_terrestrial\n##   <dbl>             <int>                 <int>                 <int>\n## 1  1999                 6                     0                     0\n## 2  2002                 0                     1                     1\n## 3  2003                 0                     3                     1\n## 4  2005                 0                     2                     1\n## 5  2008                 0                     5                    13\n## 6  2010                 8                     2                     5\n## # ℹ 5 more variables: parasites_aquatic <int>, stress_aquatic <int>,\n## #   stress_terrestrial <int>, toxicants_terrestrial <int>,\n## #   toxicants_aquatic <int>"},{"path":"manipulation.html","id":"wide-to-long","chapter":"9 Data Manipulation with R, Part 2","heading":"9.5.2 Wide to long","text":"direction, sometimes end data wide needs long. example, let’s say data set counts site across years:(Side note: example simulate data test code. can go detail later course.), use pivot_longer() function, also tidyr identify columns want pivot cols. want get values columns except year column, use minus sign (-) indicate . also list columns (c(site1, site2, site3)), unwieldy. also specify column names new columns creating: one column names old wide data frame (names_to) one values.One common challenge pivoting longer data frame columns ones want include long data. example, let’s say survey data also included information observer:, get error pivot_longer() trying make single column (“count”) includes numbers character. can get around removing observer data pivoting , want information, including column specification:","code":"\nsurvey_data <- sample(0:100, 10*12, replace = T) %>% \n  matrix(nrow = 10, ncol = 12) %>%\n  as.data.frame() %>%\n  setNames(str_c(\"site\",1:12)) %>%\n  bind_cols(year = 2000:2009) %>% \n  select(year, everything())\nsurvey_data##    year site1 site2 site3 site4 site5 site6 site7 site8 site9 site10 site11\n## 1  2000    16    73    51    80    53    69     4    87    86     91     96\n## 2  2001    98    91    84    10    62    66    16    45     7     42     56\n## 3  2002    59    81    76    69    36    10    71    71    87     51     72\n## 4  2003    54    97    37    25    13    63    52    56    61      3     48\n## 5  2004    98    17    66    72    64    48    59    66     3     52     68\n## 6  2005    13     5    54    40    47    90    62    59    83     28     88\n## 7  2006    27    72    62    56    83     4    87    55     2     95     19\n## 8  2007    90    87    80    32    41     7    53    72    54     12     88\n## 9  2008     6    79    51    24    47    91    39    41    93     77     46\n## 10 2009    72     2    88    42    41    94    66    46    20      1     77\n##    site12\n## 1     100\n## 2      93\n## 3      15\n## 4      55\n## 5      22\n## 6      70\n## 7      40\n## 8      61\n## 9      91\n## 10     37\nsurvey_data %>%\n  pivot_longer(cols = -year, names_to = \"site\", values_to = \"count\")## # A tibble: 120 × 3\n##     year site   count\n##    <int> <chr>  <int>\n##  1  2000 site1     16\n##  2  2000 site2     73\n##  3  2000 site3     51\n##  4  2000 site4     80\n##  5  2000 site5     53\n##  6  2000 site6     69\n##  7  2000 site7      4\n##  8  2000 site8     87\n##  9  2000 site9     86\n## 10  2000 site10    91\n## # ℹ 110 more rows\nsurvey_data <- mutate(survey_data, observer = sample(c(\"A\",\"B\",\"C\"), nrow(survey_data), replace = T))\nsurvey_data %>%\n  pivot_longer(cols = -year, names_to = \"site\", values_to = \"count\")## Error in `pivot_longer()`:\n## ! Can't combine `site1` <integer> and `observer` <character>.\nsurvey_data %>%\n  select(-observer) %>%\n  pivot_longer(cols = -year, names_to = \"site\", values_to = \"count\") %>%\n  head()## # A tibble: 6 × 3\n##    year site  count\n##   <int> <chr> <int>\n## 1  2000 site1    16\n## 2  2000 site2    73\n## 3  2000 site3    51\n## 4  2000 site4    80\n## 5  2000 site5    53\n## 6  2000 site6    69\nsurvey_data %>%\n  pivot_longer(cols = -c(year, observer), names_to = \"site\", values_to = \"count\") ## # A tibble: 120 × 4\n##     year observer site   count\n##    <int> <chr>    <chr>  <int>\n##  1  2000 B        site1     16\n##  2  2000 B        site2     73\n##  3  2000 B        site3     51\n##  4  2000 B        site4     80\n##  5  2000 B        site5     53\n##  6  2000 B        site6     69\n##  7  2000 B        site7      4\n##  8  2000 B        site8     87\n##  9  2000 B        site9     86\n## 10  2000 B        site10    91\n## # ℹ 110 more rows"},{"path":"style.html","id":"style","chapter":"10 Coding Best Practices","heading":"10 Coding Best Practices","text":"","code":""},{"path":"style.html","id":"objectives-7","chapter":"10 Coding Best Practices","heading":"10.1 Objectives","text":"Write code consistent, readable styleUnderstand best practices citing R R packages scientific productsCreate README files data/codeCreate reproducible examples code sharing troubleshooting","code":""},{"path":"style.html","id":"additional-reading-7","chapter":"10 Coding Best Practices","heading":"10.2 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 4: Workflow: code style. Available: https://r4ds.hadley.nz/workflow-style.html","code":""},{"path":"style.html","id":"style-1","chapter":"10 Coding Best Practices","heading":"10.3 Style","text":"","code":""},{"path":"style.html","id":"why-is-code-style-important","chapter":"10 Coding Best Practices","heading":"10.3.1 Why is code style important?","text":"Whether working tidyverse base R, consistent style can help make code readable, others . Style includes practices like consistent formatting variable names, using spaces, using new lines within code chunks. Like punctuation regular writing, practices can tell reader stop consider come , can break monotony lines lines code.","code":""},{"path":"style.html","id":"object-names","chapter":"10 Coding Best Practices","heading":"10.3.2 Object names","text":"R following constraints object names:contain spaces;must start letter (number symbol);contain mathematical symbols (+, -, =, etc.),can contain dots (.) underscores (_).Two common ways naming objects camelCase snake_case, separate new words variable names either capital letter underscore. might also see people use dot.case. can work, snake_case generally considered preferable avoids issues related capitalization (e.g., wanted variable called ANOVA_results? ANOVAResults?).general, ’s best strike balance short, fast--type variable names longer, descriptive names. personally bad habit bringing data sets calling dat (data - data R function, prefer object name). , later script, know data set dat dat1?","code":""},{"path":"style.html","id":"spaces-and-new-lines","chapter":"10 Coding Best Practices","heading":"10.3.3 Spaces and new lines","text":"Spaces can help reader identify functions operators, many small easy miss. therefore recommended put space sides mathematical assignment operators (+, -, <-, etc.). also nice put spaces commas, like normal English writing. Avoid putting spaces parentheses define functions; makes harder tell function arguments start end.R already written monospaced font (meaning every character width), can also use spaces help align code:code chunk , can also see added new line pipe variable wanted add mutate. Especially call functions within functions (e.g., ifelse ), new lines help delineate new variable, row, column comes play.","code":"\ndat %>%\n  mutate(tigers       = ifelse(str_detect(species, \"tiger\"), \"yes\", \"no\"),\n         mammals      = species != \"turtle\",\n         count_hourly = count / 24)"},{"path":"style.html","id":"comments","chapter":"10 Coding Best Practices","heading":"10.3.4 Comments!","text":"’ve probably already noticed can denote code comment using #. means R try execute code:Good commenting takes practice. Like variable names, ’s balance convenience coding without comments benefit line code explained - creates lot clutter.example:comments aren’t particularly useful: example, single line code loads data probably doesn’t need explanation. Instead, useful comments might like :Now, explaining line exists instead ; already contained code !RStudio also recognize comments section breaks, appear bottom-left corner script allow navigate across document. look like :line starts # ends least three dashes #s automatically become header.","code":"\n# You can tell that this is a comment\n# because it has spaces and R didn't get mad.\n# Also, it's italicized and preceded by #\n# Load data\ndat <- read_csv(\"data/surveys.csv\")\n# Remove the \"species\" column\ndat <- select(dat, -species)\n# Multiply counts by 24\ndat <- mutate(dat, count = count * 24)\n# Raw survey data from 2015\ndat <- read_csv(\"data/surveys.csv\")\n# Species column is redundant with taxon column\ndat <- select(dat, -species)\n# Convert hourly counts to daily equivalent\ndat <- mutate(dat, count = count * 24)\n# Header 1 -----------\n# Header 2 -----------"},{"path":"style.html","id":"rstudio-settings-that-can-help","chapter":"10 Coding Best Practices","heading":"10.3.5 RStudio settings that can help","text":"RStudio provides features can help code style:Autofill object names functionsBracket highlightingAlignment linesThere also RStudio add-called styler, formats code automatically. default, follows tidyverse style (see Additional Reading ) can also customize preferred style.","code":""},{"path":"style.html","id":"writing-a-readme","chapter":"10 Coding Best Practices","heading":"10.4 Writing a README","text":"readme file provides information data software (generically, set files). README helps users interpret files sharing publishing data, code, software. basic, README simple text file provides general information project, title authorship. common useful components :Sharing/access information (e.g., licenses)Data/file overview (file list)Methodological information (data generated?)Instructions use (e.g., software installation)Resources, including templates:https://www.makeareadme.com/https://docs.github.com/en/get-started/writing--github/getting-started--writing--formatting--github/basic-writing--formatting-syntaxhttps://data.research.cornell.edu/data-management/sharing/readme/","code":""},{"path":"style.html","id":"citing-packages-and-software","chapter":"10 Coding Best Practices","heading":"10.5 Citing packages and software","text":"https://cran.r-project.org/web/packages/report/vignettes/cite_packages.htmlCiting R packages important step reproducibility also important crediting authors packages, just like using data information source. However, guidelines vary: sources suggest cite every package use, others suggest cite just important packages. Current practice ecology usually cite packages produce results (e.g., statistical packages, simulation, etc.) packages used data processing manipulation (e.g., tidyverse). also important cite R . Remember point R work hood; RStudio just way accessing R. typical citation might look something like :analyses conducted R version 4.1.1 (R Core Team 2024). packages lme4 vegan (Bates et al. 2015; Oksanen et al. 2025) used linear models community composition analysis, respectively.can get citation information packages using citation(\"packagename\") function R version using R.Version():also best practice present information packages appendices report manuscript. ? especially important package versions analysis software - sometimes --hood methods change, can change results. Proper documentation therefore crucial!note caution: remember include version numbers citations. Reference managers like Zotero often leave reference lists, sure double check.Another helpful tool citations report package, conveniently output list packages loaded script!","code":"\ncitation(\"tidyverse\")## To cite package 'tidyverse' in publications use:\n## \n##   Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R,\n##   Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller\n##   E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V,\n##   Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). \"Welcome to\n##   the tidyverse.\" _Journal of Open Source Software_, *4*(43), 1686.\n##   doi:10.21105/joss.01686 <https://doi.org/10.21105/joss.01686>.\n## \n## A BibTeX entry for LaTeX users is\n## \n##   @Article{,\n##     title = {Welcome to the {tidyverse}},\n##     author = {Hadley Wickham and Mara Averick and Jennifer Bryan and Winston Chang and Lucy D'Agostino McGowan and Romain François and Garrett Grolemund and Alex Hayes and Lionel Henry and Jim Hester and Max Kuhn and Thomas Lin Pedersen and Evan Miller and Stephan Milton Bache and Kirill Müller and Jeroen Ooms and David Robinson and Dana Paige Seidel and Vitalie Spinu and Kohske Takahashi and Davis Vaughan and Claus Wilke and Kara Woo and Hiroaki Yutani},\n##     year = {2019},\n##     journal = {Journal of Open Source Software},\n##     volume = {4},\n##     number = {43},\n##     pages = {1686},\n##     doi = {10.21105/joss.01686},\n##   }\nR.Version()## $platform\n## [1] \"aarch64-apple-darwin20\"\n## \n## $arch\n## [1] \"aarch64\"\n## \n## $os\n## [1] \"darwin20\"\n## \n## $system\n## [1] \"aarch64, darwin20\"\n## \n## $status\n## [1] \"\"\n## \n## $major\n## [1] \"4\"\n## \n## $minor\n## [1] \"4.1\"\n## \n## $year\n## [1] \"2024\"\n## \n## $month\n## [1] \"06\"\n## \n## $day\n## [1] \"14\"\n## \n## $`svn rev`\n## [1] \"86737\"\n## \n## $language\n## [1] \"R\"\n## \n## $version.string\n## [1] \"R version 4.4.1 (2024-06-14)\"\n## \n## $nickname\n## [1] \"Race for Your Life\"\nlibrary(report)\ncite_packages()##   - Makowski D, Lüdecke D, Patil I, Thériault R, Ben-Shachar M, Wiernik B (2023). \"Automated Results Reporting as a Practical Tool to Improve Reproducibility and Methodological Best Practices Adoption.\" _CRAN_. <https://easystats.github.io/report/>.\n##   - R Core Team (2024). _R: A Language and Environment for Statistical Computing_. R Foundation for Statistical Computing, Vienna, Austria. <https://www.R-project.org/>."},{"path":"style.html","id":"reproducible-examples","chapter":"10 Coding Best Practices","heading":"10.6 Reproducible examples","text":"mentioned reproducible examples troubleshooting lesson. advent chatbots help troubleshooting, might less likely need example posting Stack Overflow, examples can still helpful asking chatbots advice, sharing code colleagues, eventually teaching. example, might working large data set, private data can’t share, want share piece code show works. can also help clarify problem stripping unnecessary complexity. base, reproducible example includes:minimal dataset can demonstrate problem (concept)minimal code uses data reproduce problem (concept)necessary information packages system (R version, OS, maybe output sessionInfo()) affect code, well random seed anything random process","code":""},{"path":"style.html","id":"the-minimal-dataset","chapter":"10 Coding Best Practices","heading":"10.6.1 1. The minimal dataset","text":"two main approaches minimal data set: built-dataset example dataset. Sometimes, problem can reproduced using one datasets built base R (can access using data()). times, need create data set like one working - example, needs include factor variable number levels, variable date format.","code":""},{"path":"style.html","id":"the-minimal-code","chapter":"10 Coding Best Practices","heading":"10.6.2 2. The minimal code","text":"script probably contains much line code produced error (result). make mimimal code example, want remove parts code necessary. common code components leave include:Data processing (e.g., converting types), unless steps produce error (result). Instead, minimal data already format.Lines code beyond error result (e.g., visualizations).","code":""},{"path":"style.html","id":"other-necessary-information","chapter":"10 Coding Best Practices","heading":"10.6.3 3. Other necessary information","text":"Sometimes, different versions R packages R give different results updates create fix bugs, changes programs alter data processing. therefore helpful include information package versions, operating system, version R using reproducible example. can access information one go using:","code":"\nsessionInfo()## R version 4.4.1 (2024-06-14)\n## Platform: aarch64-apple-darwin20\n## Running under: macOS 15.5\n## \n## Matrix products: default\n## BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \n## LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n## \n## locale:\n## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n## \n## time zone: America/New_York\n## tzcode source: internal\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n## [1] report_0.6.1\n## \n## loaded via a namespace (and not attached):\n##  [1] digest_0.6.37     R6_2.5.1          bookdown_0.43     fastmap_1.2.0    \n##  [5] xfun_0.52         cachem_1.1.0      knitr_1.50        memoise_2.0.1    \n##  [9] htmltools_0.5.8.1 rmarkdown_2.29    lifecycle_1.0.4   xml2_1.3.6       \n## [13] cli_3.6.3         downlit_0.4.4     sass_0.4.9        withr_3.0.2      \n## [17] jquerylib_0.1.4   compiler_4.4.1    rstudioapi_0.17.1 tools_4.4.1      \n## [21] evaluate_1.0.1    bslib_0.8.0       yaml_2.3.10       fs_1.6.4         \n## [25] jsonlite_1.8.9    rlang_1.1.4       insight_1.3.0"},{"path":"style.html","id":"an-example","chapter":"10 Coding Best Practices","heading":"10.6.4 An example","text":"example simple error might go creating reproducible example :Let’s say can’t figure error produced (can ?). first want isolate problem make reproducible. , :Reduce dataset relevant columnsCreate small subset (fewer rows)Simplify code, possibleNow code simplifed, little easier spot problem: using different variable name body mass summary (bodyweight_g) original data (body_mass_g). Now, can fix error:","code":"\nlibrary(tidyverse)## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nlibrary(palmerpenguins)\n\npenguins %>%\n  group_by(species, island) %>%\n  summarize(avg_mass = mean(bodyweight_g, na.rm = TRUE))## Error in `summarize()`:\n## ℹ In argument: `avg_mass = mean(bodyweight_g, na.rm = TRUE)`.\n## ℹ In group 1: `species = Adelie` and `island = Biscoe`.\n## Caused by error:\n## ! object 'bodyweight_g' not found\n# Minimal dataset and code for reproducible example\nlibrary(tidyverse)\n\n# Create a small tibble with just the relevant structure\nmini_data <- tibble(\n  species = c(\"Adelie\", \"Chinstrap\", \"Gentoo\"),\n  island = c(\"Torgersen\", \"Dream\", \"Biscoe\"),\n  body_mass_g = c(3750, 3800, 5000)\n)\n\n# This code produces the same error\nmini_data %>%\n  group_by(species, island) %>%\n  summarize(avg_mass = mean(bodyweight_g, na.rm = TRUE))## Error in `summarize()`:\n## ℹ In argument: `avg_mass = mean(bodyweight_g, na.rm = TRUE)`.\n## ℹ In group 1: `species = \"Adelie\"` and `island = \"Torgersen\"`.\n## Caused by error:\n## ! object 'bodyweight_g' not found\npenguins %>%\n  group_by(species, island) %>%\n  summarize(avg_mass = mean(body_mass_g, na.rm = TRUE))## `summarise()` has grouped output by 'species'. You can override using the\n## `.groups` argument.## # A tibble: 5 × 3\n## # Groups:   species [3]\n##   species   island    avg_mass\n##   <fct>     <fct>        <dbl>\n## 1 Adelie    Biscoe       3710.\n## 2 Adelie    Dream        3688.\n## 3 Adelie    Torgersen    3706.\n## 4 Chinstrap Dream        3733.\n## 5 Gentoo    Biscoe       5076."},{"path":"style.html","id":"the-reprex-package","chapter":"10 Coding Best Practices","heading":"10.6.5 The reprex package","text":"reprex package designed help create reproducible examples. can paste code reprex() function output code looks like clean environment (.e., without packages data already loaded). way, can make sure minimal data code work someone else.\nFigure 10.1: output reprex RStudio viewer pane\n","code":"\nlibrary(reprex)\nreprex({\n  library(tidyverse)\n  library(palmerpenguins)\n  penguins %>%\n  group_by(species, island) %>%\n  summarize(avg_mass = mean(body_mass_g, na.rm = TRUE))\n})"},{"path":"ggplot.html","id":"ggplot","chapter":"11 Data Visualization with ggplot2","heading":"11 Data Visualization with ggplot2","text":"\nFigure 3.1: Visualizing visualizations. (https://xkcd.com/688/)\n","code":""},{"path":"ggplot.html","id":"objectives-8","chapter":"11 Data Visualization with ggplot2","heading":"11.1 Objectives","text":"Become familiar basic approach ggplot2 packageCreate simple graphics, including scatterplots, line plots, bar charts, histogramsArticulate value data visualization data exploration","code":""},{"path":"ggplot.html","id":"assigned-reading","chapter":"11 Data Visualization with ggplot2","heading":"11.2 Assigned reading","text":"Carl Bergstrom Jevin West (2020). Calling Bullshit. Chapter 7: Data Visualization. https://research.ebsco.com/plink/92d403ed-42b0-3601-94b4-c84627c98892","code":""},{"path":"ggplot.html","id":"additional-reading-8","chapter":"11 Data Visualization with ggplot2","heading":"11.3 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 1: Data visualization. Available: https://r4ds.hadley.nz/data-visualize.htmlHadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 9: Layers. Available: https://r4ds.hadley.nz/data-visualize.html","code":""},{"path":"ggplot.html","id":"an-introduction-to-ggplot2","chapter":"11 Data Visualization with ggplot2","heading":"11.4 An introduction to ggplot2","text":"Data visualization important part scientific process, study design data exploration results dissemination. many people, also fun. , use ggplot2 package, part tidyverse, build graphics. bit learning curve ggplot2, powerful, flexible, popular way create graphics R. start learning visualize data exploration, next lesson work creating presentation-ready graphics.get started, ’s example one kind figure create using base R graphics:, say want boxplot shows effect size (r) y-axis, function host class x-axis (~ standard function notation R). tell R draw variables urban_data data frame. add horizontal line 0 (h=0).ggplot2, looks like:produces plot, albeit differences default formatting. However, way get really different! First, initiate plot ggplot() give data frame use. give variables assignments within aes(), stands “aesthetics”. use + add plot elements: case, boxplot (draws x y first line) horizontal line (“hline”). Although base R code initially intuitive (simpler, simple plots like one), benefit ggplot2 provides structured approach allows add elements single object.ggplot composed three basic components:Data: intuitively, data want show plotAesthetics (“mapping”): variables represented plot, correspond plot features like x- y-axes, color, shape, etc.Geometries (“layers”): actual features plot (points, lines, boxes, etc.)optional elements scales, facets, coordinates, themes. get lesson presentation-ready graphics.","code":"\nlibrary(tidyverse)## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nurban_data <- read_csv(\"data/raw/Murray-Sanchez_urban-wildlife.csv\")## Rows: 516 Columns: 42\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (14): TITLE, AUTHORS, JOURNAL, health, condition, toxtype, ptype, stress...\n## dbl (28): study, YEAR, SAMPLE_SIZE, EFFECT_DIRECTION, pval, r, yi, vi, rlowe...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nboxplot(r ~ host.class, data = urban_data)\nabline(h = 0)\nggplot(data = urban_data, aes(x = host.class, y = r)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0)"},{"path":"ggplot.html","id":"layering-up-a-ggplot","chapter":"11 Data Visualization with ggplot2","heading":"11.5 Layering up a ggplot","text":"First, define data:just produces blank plot axes data - haven’t defined yet. can next:results blank plot axes, haven’t added geometries yet. , add geometries:look help file geom_boxplot, ’ll see first two arguments mapping data. ones specified ggplot. didn’t need specify geom_boxplot ones provided first line (ggplot()) global plot settings implicitly assumed every layer downstream.common geom_* functions include geom_point(), geom_line(), geom_bar(), geom_col(). continue making plots, become familiar .","code":"\nggplot(data = urban_data) \nggplot(data = urban_data, aes(x = host.class, y = r)) \nggplot(data = urban_data, aes(x = host.class, y = r)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0)"},{"path":"ggplot.html","id":"exploring-data-with-plots","chapter":"11 Data Visualization with ggplot2","heading":"11.6 Exploring data with plots","text":"can say first plot? Well, looks like might stronger negative effect urbanization health invertebrates taxa, /smaller effect mammals. variables might influence relationship? type health metric used?Can think way might display together? Think using types aesthetics, number plots, etc.’s one way:doesn’t really work, highlight one way combining ggplots data manipulation. , added new column health_class, combines health host.class variables. piped data ggplot (notice data= argument missing, default piped data goes first argument receiving function).Another way:looks like might stronger negative effect toxicants across groups, intertebrates might toxicant studies, average lower.Notice second plot, added additional aes() argument within geom_point(). wanted color points, boxplots, health metric. can always re-specify data mapping within geometries, careful data might always showing expected.","code":"\nggplot(data = urban_data, aes(x = health, y = r)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0)\nurban_data %>%\n  mutate(health_class = str_c(health, host.class, sep = \"/\")) %>%\n  ggplot(aes(x = health_class, y = r)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0)\nggplot(urban_data, aes(x = host.class, y = r, color = health)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0)\nggplot(urban_data, aes(x = host.class, y = r)) +\n  geom_boxplot() +\n  geom_point(aes(color = health)) +\n  geom_hline(yintercept = 0)"},{"path":"ggplot.html","id":"other-plot-types","chapter":"11 Data Visualization with ggplot2","heading":"11.7 Other plot types","text":"","code":""},{"path":"ggplot.html","id":"scatterplots","chapter":"11 Data Visualization with ggplot2","heading":"11.7.1 Scatterplots","text":"Scatterplots probably common type plot see, useful visualizing relationships continuous variables. example, might want see effect sizes depend urbanization gradients:can also include error bars using geom_pointrange():","code":"\nggplot(urban_data, aes(x = udiff_1000, y = r)) +\n  geom_point()## Warning: Removed 61 rows containing missing values or values outside the scale range\n## (`geom_point()`).\nggplot(urban_data, aes(x = udiff_1000, y = r)) +\n  geom_pointrange(aes(ymin = rlower, ymax = rupper))## Warning: Removed 61 rows containing missing values or values outside the scale range\n## (`geom_pointrange()`)."},{"path":"ggplot.html","id":"histograms","chapter":"11 Data Visualization with ggplot2","heading":"11.7.2 Histograms","text":"Histograms useful visualizing distributions data. take x variable, y-axis always count given bin.can also specify number bins bin width:","code":"\nggplot(urban_data, aes(x = r)) +\n  geom_histogram()## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\nggplot(urban_data, aes(x = r)) +\n  geom_histogram(binwidth = 0.2)"},{"path":"ggplot.html","id":"bar-and-column-plots","chapter":"11 Data Visualization with ggplot2","heading":"11.7.3 Bar and column plots","text":"Like boxplots, bar column plots useful visualizing relationship categorical varible continuous (usually count) variable., like, , think bar plot column plot thing, think ! Though appearance two plots similar, ggplot2 defines column plot y-axis bar plot x-axis (y-axis implicitly sample size).displaying non-count data (example, mean effect size across groups), usually better scatterplot boxplot. example, ggplot2 make bar chart :essentially getting sum positive negative effect sizes host class, might look nice doesn’t mean much.","code":"\nggplot(urban_data, aes(x = host.class)) +\n  geom_bar()\nurban_data %>%\n  group_by(host.class) %>%\n  summarize(n_countries = n_distinct(COUNTRY)) %>%\n  ggplot(aes(x = host.class, y = n_countries)) +\n  geom_col()\nggplot(urban_data, aes(x = host.class, y = r)) +\n  geom_col()"},{"path":"ggplot.html","id":"basic-visual-statistical-summaries-geom_smooth-and-stat_summary","chapter":"11 Data Visualization with ggplot2","heading":"11.8 Basic visual statistical summaries: geom_smooth() and stat_summary()","text":"Sometimes, much data, much overlapping data, effectively visualize. ggplot2 provides ways summarize data produce plot, one step. However, note stats hood! good data exploration want present need make sure know underlying model .One way summarize trends time relationships variables geom_smooth(). hood, function models nonlinear relationships variables.Wait, stat_ thing? ’s geom_ produces elements plot. hood, geoms use stats. cases, stat=\"identity\", ggplot just plotting raw values. , example, bar plot, stat “count” default:just one example customization options ggplot2.","code":"\nggplot(urban_data, aes(x = YEAR, y = r)) +\n  geom_point() +\n  geom_smooth()## `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\nggplot(urban_data, aes(x = host.class, y = r)) +\n  stat_summary() ## No summary function supplied, defaulting to `mean_se()`"},{"path":"ggplot.html","id":"groups-and-symbology","chapter":"11 Data Visualization with ggplot2","heading":"11.9 Groups and symbology","text":"can also specify symbology plots represent variables. parameters can also specified fixed (example, change points given color). can defining parameter outside aes().","code":"\nggplot(urban_data, aes(x = host.class, y = r)) +\n  geom_boxplot(color = \"red\")"},{"path":"ggplot.html","id":"color","chapter":"11 Data Visualization with ggplot2","heading":"11.9.1 Color","text":"Color usually first step visualize groups variables plots, especially exploratory data visualization. get color scales schemes next lesson.barplots, boxplots, plot types polygons, ggplot distinguishes fill color:","code":"\nurban_data %>%\n  filter(udiff_10000 != 0) %>%\n  ggplot(aes(x = udiff_10000, y = r, color = host.class)) +\n  geom_point() \nggplot(urban_data, aes(x = host.class, y = r)) +\n  geom_boxplot(aes(fill = aqterr))\nggplot(urban_data, aes(x = host.class, y = r)) +\n  geom_boxplot(aes(color = aqterr))"},{"path":"ggplot.html","id":"shape","chapter":"11 Data Visualization with ggplot2","heading":"11.9.2 Shape","text":"Shape little harder see color people, can serve helpful secondary indicator. can useful pair shape color. Shape generally used categorical variables shouldn’t used >6 levels, shapes become difficult distinguish.","code":"\nurban_data %>%\n  filter(udiff_10000 != 0) %>%\n  ggplot(aes(x = udiff_10000, y = r, shape = host.class)) +\n  geom_point() \nurban_data %>%\n  group_by(YEAR, host.class) %>%\n  summarize(r = mean(r)) %>%\n  ggplot(aes(x = YEAR, y = r, linetype = host.class)) +\n  geom_line() ## `summarise()` has grouped output by 'YEAR'. You can override using the\n## `.groups` argument."},{"path":"ggplot.html","id":"size","chapter":"11 Data Visualization with ggplot2","heading":"11.9.3 Size","text":"Size usually best used continuous (least number-related) variables. default, size point ggplot based dimensions, e.g., radius round point. important note, point twice radius another point four times area. Size therefore ideal representing variables inferring value important, can help emphasize general patterns draw attention data points others.","code":"\nggplot(urban_data, aes(x = YEAR, y = r, size = log10(SAMPLE_SIZE))) +\n  geom_point() "},{"path":"ggplot.html","id":"transparency","chapter":"11 Data Visualization with ggplot2","heading":"11.9.4 Transparency","text":"Transparency indicated alpha parameter. Transparency intuitively used symbolize importance, example sample size:can also convenient use transparency show densities overlapping data, plot models data.","code":"\nggplot(urban_data, aes(x = YEAR, y = r, alpha = log10(SAMPLE_SIZE))) +\n  geom_point() "},{"path":"ggplot.html","id":"groups","chapter":"11 Data Visualization with ggplot2","heading":"11.9.5 Groups","text":"geoms benefit specification groups, tell ggplot data points link together. example, boxplots made grouped host.class variable (group, just one boxplot data). default, ggplot usually take aesthetics combine make groups - cases , x color. However, sometimes doesn’t work default, want specify groups aren’t linked symbology.example, line chart without groups:groups:","code":"\nurban_data %>%\n  group_by(YEAR, host.class) %>%\n  summarize(r = mean(r)) %>%\n  ggplot(aes(x = YEAR, y = r)) +\n  geom_line() ## `summarise()` has grouped output by 'YEAR'. You can override using the\n## `.groups` argument.\nurban_data %>%\n  group_by(YEAR, host.class) %>%\n  summarize(r = mean(r)) %>%\n  ggplot(aes(x = YEAR, y = r, group = host.class)) +\n  geom_line() ## `summarise()` has grouped output by 'YEAR'. You can override using the\n## `.groups` argument."},{"path":"ggplot.html","id":"additional-reference","chapter":"11 Data Visualization with ggplot2","heading":"11.10 Additional reference","text":"Data visualization ggplot2 :: Cheat Sheet. Available: https://rstudio.github.io/cheatsheets/html/data-visualization.html","code":""},{"path":"data-presentation.html","id":"data-presentation","chapter":"12 Customizing Graphics with ggplot2","heading":"12 Customizing Graphics with ggplot2","text":"\nFigure 3.1: least ’s colorful! (https://xkcd.com/2864/)\n","code":""},{"path":"data-presentation.html","id":"objectives-9","chapter":"12 Customizing Graphics with ggplot2","heading":"12.1 Objectives","text":"Customize plots ggplot, including axes, symbology, legendsUse themes change plot designSave plots variety formats future use","code":""},{"path":"data-presentation.html","id":"additional-reading-9","chapter":"12 Customizing Graphics with ggplot2","heading":"12.2 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 9: Layers. Available: https://r4ds.hadley.nz/data-visualize.html","code":""},{"path":"data-presentation.html","id":"data-presentation-1","chapter":"12 Customizing Graphics with ggplot2","heading":"12.3 Data presentation","text":"previous lesson, learned basics ggplot2 syntax graphics used graphs data visualization. Now learn make pretty practice effective ways communicate data.","code":""},{"path":"data-presentation.html","id":"axes","chapter":"12 Customizing Graphics with ggplot2","heading":"12.4 Axes","text":"","code":""},{"path":"data-presentation.html","id":"axis-titles","chapter":"12 Customizing Graphics with ggplot2","heading":"12.4.1 Axis titles","text":"usual coding, multiple ways change axis labels. Going back urban_data boxplot:can achieve result :","code":"\nlibrary(tidyverse)## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nurban_data <- read_csv(\"data/raw/Murray-Sanchez_urban-wildlife.csv\")## Rows: 516 Columns: 42\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (14): TITLE, AUTHORS, JOURNAL, health, condition, toxtype, ptype, stress...\n## dbl (28): study, YEAR, SAMPLE_SIZE, EFFECT_DIRECTION, pval, r, yi, vi, rlowe...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nggplot(data = urban_data, aes(x = host.class, y = r)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0) +\n  labs(x = \"Host taxon\", y = \"Effect size (r)\")\nggplot(data = urban_data, aes(x = host.class, y = r)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0) +\n  xlab(\"Host taxon\") + ylab(\"Effect size (r)\")"},{"path":"data-presentation.html","id":"axis-labels","chapter":"12 Customizing Graphics with ggplot2","heading":"12.4.2 Axis labels","text":"Sometimes, axes aren’t labeled way want . example, way variable coded data frame might ideal presentation. Let’s say wanted capitalize host taxon variable:, breaks labels must vectors length, order. breaks indicates values data labels appear, labels indicates corresponding label break.code chunk also introduces scales, ggplot’s way representing data. , discrete x-axis, use scale_x_discrete(). wanted edit continuous axis, use scale_*_continuous():","code":"\nggplot(data = urban_data, aes(x = host.class, y = r)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0) +\n  scale_x_discrete(\"Host taxon\", \n                   breaks = unique(urban_data$host.class), \n                   labels = str_to_sentence(unique(urban_data$host.class))) + \n  ylab(\"Effect size (r)\")\nggplot(data = urban_data, aes(x = host.class, y = r)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0) +\n  scale_x_discrete(\"Host taxon\", \n                   breaks = unique(urban_data$host.class), \n                   labels = str_to_sentence(unique(urban_data$host.class))) + \n  scale_y_continuous(\"Effect size (r)\", \n                     breaks = seq(from = -1, to = 1, by = 0.2))"},{"path":"data-presentation.html","id":"editing-legends","chapter":"12 Customizing Graphics with ggplot2","heading":"12.5 Editing legends","text":"Legends automatically appear plot contains symbology like color, shape, linetype, etc. connected variable (.e., enclosed aes()).might want change title legend, capitalize labels, arrange alphabetical order:x-axis, use scale_fill_discrete() color maps discrete variable.","code":"\nggplot(urban_data, aes(x = host.class, y = r, color = health)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0) +\n  scale_x_discrete(\"Host taxon\", \n                   breaks = unique(urban_data$host.class), \n                   labels = str_to_sentence(unique(urban_data$host.class))) + \n  scale_y_continuous(\"Effect size (r)\", \n                     breaks = seq(from = -1, to = 1, by = 0.2))\nggplot(urban_data, aes(x = host.class, y = r, fill = health)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0) +\n  scale_x_discrete(\"Host taxon\", \n                   breaks = unique(urban_data$host.class), \n                   labels = str_to_sentence(unique(urban_data$host.class))) + \n  scale_y_continuous(\"Effect size (r)\", \n                     breaks = seq(from = -1, to = 1, by = 0.2)) +\n  scale_fill_discrete(\"Health metric\",\n                      breaks = sort(unique(urban_data$health)),\n                      labels = str_to_sentence(sort(unique(urban_data$health))))"},{"path":"data-presentation.html","id":"placing-plot-elements","chapter":"12 Customizing Graphics with ggplot2","heading":"12.6 Placing plot elements","text":"plot getting better, ’s something difficult see boxplots. different host taxa kind close together. can fix within geom_boxplot() specifying width boxes:default, ggplot2 places boxplots next one another, isn’t default geometries. example, instead plot mean standard error group:, can use position argument offset points error bars.position options available geometries, others :\"identity\": default points, ranges, lines. Places geometry exactly x-coordinate.\"dodge\": offsets points based group aesthetic (implicitly color, shape, etc.), specified width. \"dodge2\" similar, adds padding geometries (e.g., boxplot edges touch).\"jitter\": adds random noise x- /y-coordinates.\"stack\": bar/column charts, places bars top one another instead next one another (\"dodge\").can get full list position options typing ?position_ seeing autofills.\nFigure 12.1: RStudio’s autofill feature help\n","code":"\nggplot(urban_data, aes(x = host.class, y = r, fill = health)) +\n  geom_boxplot(width = 0.5) +\n  geom_hline(yintercept = 0) +\n  scale_x_discrete(\"Host taxon\", \n                   breaks = unique(urban_data$host.class), \n                   labels = str_to_sentence(unique(urban_data$host.class))) + \n  scale_y_continuous(\"Effect size (r)\", \n                     breaks = seq(from = -1, to = 1, by = 0.2)) +\n  scale_fill_discrete(\"Health metric\",\n                      breaks = unique(urban_data$health),\n                      labels = str_to_sentence(unique(urban_data$health)))\nggplot(urban_data, aes(x = host.class, y = r, color = health)) +\n  stat_summary() +\n  geom_hline(yintercept = 0) +\n  scale_x_discrete(\"Host taxon\", \n                   breaks = unique(urban_data$host.class), \n                   labels = str_to_sentence(unique(urban_data$host.class))) + \n  scale_y_continuous(\"Effect size (r)\", \n                     breaks = seq(from = -1, to = 1, by = 0.2)) +\n  scale_color_discrete(\"Health metric\",\n                       breaks = unique(urban_data$health),\n                       labels = str_to_sentence(unique(urban_data$health)))## No summary function supplied, defaulting to `mean_se()`\nggplot(urban_data, aes(x = host.class, y = r, color = health)) +\n  stat_summary(position = position_dodge(width = 0.2)) +\n  geom_hline(yintercept = 0) +\n  scale_x_discrete(\"Host taxon\", \n                   breaks = unique(urban_data$host.class), \n                   labels = str_to_sentence(unique(urban_data$host.class))) + \n  scale_y_continuous(\"Effect size (r)\", \n                     breaks = seq(from = -1, to = 1, by = 0.2)) +\n  scale_color_discrete(\"Health metric\",\n                       breaks = unique(urban_data$health),\n                       labels = str_to_sentence(unique(urban_data$health)))## No summary function supplied, defaulting to `mean_se()`"},{"path":"data-presentation.html","id":"labeling-data-and-plots","chapter":"12 Customizing Graphics with ggplot2","heading":"12.7 Labeling data and plots","text":"","code":""},{"path":"data-presentation.html","id":"text-variables","chapter":"12 Customizing Graphics with ggplot2","heading":"12.7.1 Text variables","text":"dealt geom_s date. One geom_text(), can useful labeling data points (can also dangerous - much text plot impossible read). geom_text() works just like geoms, specifications x, y, label (text ):okay, text plotted top points. arguments within geom_text() can help .Justification: hjust (horizontal justification) vjust (vertical justification) defined 0 1. 0 means left- bottom-justified, 0.5 centered, 1 means right- top-justified. default, 0.5, can move text changing values:can also specify using characters (“left”, “middle”, “right”/“top”, “bottom”, “center”). two special alignments: “inward” “outward”. Inward always aligns text towards center plot, outward aligns away center.can also move text using nudge_x nudge_y (units axes):can use position arguments :ggplot provides check_overlap argument, plot one text cases labels overlap:","code":"\nurban_data %>%\n  filter(YEAR == 2009) %>%\n  ggplot(aes(x = udiff_1000, y = r)) +\n  geom_point() +\n  labs(x = \"Urban gradient (1 km)\", y = \"Effect size (r)\") +\n  geom_text(aes(label = AUTHORS)) \nurban_data %>%\n  filter(YEAR == 2009) %>%\n  ggplot(aes(x = udiff_1000, y = r)) +\n  geom_point() +\n  labs(x = \"Urban gradient (1 km)\", y = \"Effect size (r)\") +\n  geom_text(aes(label = AUTHORS), hjust = 0, vjust = 1) \nurban_data %>%\n  filter(YEAR == 2009) %>%\n  ggplot(aes(x = udiff_1000, y = r)) +\n  geom_point() +\n  labs(x = \"Urban gradient (1 km)\", y = \"Effect size (r)\") +\n  geom_text(aes(label = AUTHORS), hjust = \"inward\", vjust = 1) \nurban_data %>%\n  filter(YEAR == 2009) %>%\n  ggplot(aes(x = udiff_1000, y = r)) +\n  geom_point() +\n  labs(x = \"Urban gradient (1 km)\", y = \"Effect size (r)\") +\n  geom_text(aes(label = AUTHORS), hjust = 0, vjust = 1, nudge_x = 1) \nurban_data %>%\n  filter(YEAR == 2009) %>%\n  ggplot(aes(x = udiff_1000, y = r)) +\n  geom_point() +\n  labs(x = \"Urban gradient (1 km)\", y = \"Effect size (r)\") +\n  geom_text(aes(label = AUTHORS), position = position_jitter(width = 1, height = .1))\nurban_data %>%\n  filter(YEAR == 2009) %>%\n  ggplot(aes(x = udiff_1000, y = r)) +\n  geom_point() +\n  labs(x = \"Urban gradient (1 km)\", y = \"Effect size (r)\") +\n  geom_text(aes(label = AUTHORS), hjust = \"inward\", nudge_y = -0.01, check_overlap = T)"},{"path":"data-presentation.html","id":"annotation","chapter":"12 Customizing Graphics with ggplot2","heading":"12.7.2 Annotation","text":"Sometimes, want add annotation unrelated data, example labeling trendline plot elements. can annotate() element.can see works pretty similarly geom_text(), although first specify want text. also add point, polygon, specifying first argument annotate() function. Note nudges work annotations.","code":"\nggplot(urban_data, aes(x = host.class, y = r, fill = health)) +\n  geom_boxplot(width = 0.5) +\n  geom_hline(yintercept = 0) +\n  scale_x_discrete(\"Host taxon\", \n                   breaks = unique(urban_data$host.class), \n                   labels = str_to_sentence(unique(urban_data$host.class))) + \n  scale_y_continuous(\"Effect size (r)\", \n                     breaks = seq(from = -1, to = 1, by = 0.2)) +\n  scale_fill_discrete(\"Health metric\",\n                      breaks = unique(urban_data$health),\n                      labels = str_to_sentence(unique(urban_data$health))) +\n  annotate(\"text\", x = 0.1, y = 0, label = \"No effect\\n(r=0)\",\n           hjust = 0, vjust = 0.5) "},{"path":"data-presentation.html","id":"arranging-multiple-plots","chapter":"12 Customizing Graphics with ggplot2","heading":"12.8 Arranging multiple plots","text":"Often, want display data across multiple plots. Multipanel figures come two main flavors: using data variables, panels separate groups, using different data /variables, want display next . call facets grids, respectively.","code":""},{"path":"data-presentation.html","id":"facets","chapter":"12 Customizing Graphics with ggplot2","heading":"12.8.1 Facets","text":"can think facets almost like another level symbology. might exhausted much can show one plot symbology alone. plot getting busy, can’t really see everything . example, wanted show effect size function health metric, host group, year publication one plot, theory show combination axes, color, shape:’s really hard find patterns plot. Maybe blue points (invertebrates) start showing 2012? Maybe ’s positive trend pink points (mammals)? tons toxicant studies 2015 - ’s ? might get clarity using multiple panels., facet_wrap(~health) means want panels created function health variable. common faceting function facet_grid(), explicitly uses x y axes, can allow us display even data:course, adding data isn’t always good thing: eight panels lot!","code":"\nggplot(urban_data, aes(x = YEAR, y = r)) +\n  geom_point(aes(color = host.class, shape = health)) +\n  scale_shape_discrete(\"Health metric\") +\n  scale_color_discrete(\"Host group\")\nggplot(urban_data, aes(x = YEAR, y = r)) +\n  geom_point(aes(color = host.class)) +\n  scale_color_discrete(\"Host group\") +\n  facet_wrap(~health)\nggplot(urban_data, aes(x = YEAR, y = r)) +\n  geom_point(aes(color = host.class)) +\n  scale_shape_discrete(\"Health metric\") +\n  scale_color_discrete(\"Host group\") +\n  facet_grid(aqterr~health)"},{"path":"data-presentation.html","id":"grids","chapter":"12 Customizing Graphics with ggplot2","heading":"12.8.2 Grids","text":"Especially reports manuscripts, sometimes want make multi-panel figures don’t share axes. isn’t possible using ggplot2’s facets. , call packages. multiple packages interface ggplot2 create multipanel figures. , use cowplot.cowplot allows much functionality. Take look many options plot_grid() function: can align plot axes, change relative widths plot, .","code":"\n# install.packages(\"cowplot\")\nlibrary(cowplot)## \n## Attaching package: 'cowplot'## The following object is masked from 'package:lubridate':\n## \n##     stamp\np_year <- ggplot(urban_data, aes(x = YEAR, y = r)) +\n  geom_point() +\n  xlab(\"Year\") + ylab(\"Effect size (r)\")\np_host <- ggplot(urban_data, aes(x = host.class, y = r)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0) +\n  scale_x_discrete(\"Host taxon\", \n                   breaks = unique(urban_data$host.class), \n                   labels = str_to_sentence(unique(urban_data$host.class))) + \n  scale_y_continuous(\"Effect size (r)\", \n                     breaks = seq(from = -1, to = 1, by = 0.2))\n\ncowplot::plot_grid(p_year, p_host,\n                   nrow = 1, ncol = 2)"},{"path":"data-presentation.html","id":"design","chapter":"12 Customizing Graphics with ggplot2","heading":"12.9 Design","text":"","code":""},{"path":"data-presentation.html","id":"themes","chapter":"12 Customizing Graphics with ggplot2","heading":"12.9.1 Themes","text":"theme function allows us control overarching design across plot. look help page ?theme, see overwhelming number arguments! basically say can customize design many plot elements. ggplot2 also provides default themes, generally control plot backgrounds axes. default theme theme_gray(). Let’s explore others:Notice also added themes titles object p_year created code chunk . one nice aspect ggplots: can add new layers even creating object.themes convenient ’s much . example, theme allows us control size text across multiple plot elements, move around legend, change titles facts (called “strips”).many options…","code":"\ncowplot::plot_grid(p_year + labs(title = \"Gray\"), \n                   p_year + theme_classic() + labs(title = \"Classic\"),\n                   p_year + theme_bw() + labs(title = \"B/W\"), \n                   p_year + theme_dark() + labs(title = \"Dark\"))\nggplot(urban_data, aes(x = YEAR, y = r)) +\n  geom_point(aes(color = host.class)) +\n  scale_shape_discrete(\"Health metric\") +\n  scale_color_discrete(\"Host group\") +\n  scale_x_continuous(\"Year\") + scale_y_continuous(\"Effect size (r)\") +\n  facet_grid(aqterr~health) +\n  theme_bw() +\n  theme(legend.position = \"bottom\", \n        legend.title = element_text(size = 13),\n        legend.text = element_text(size = 11),\n        axis.text = element_text(size = 11),\n        axis.title = element_text(size = 13),\n        strip.text = element_text(size = 14))"},{"path":"data-presentation.html","id":"color-schemes","chapter":"12 Customizing Graphics with ggplot2","heading":"12.9.2 Color schemes","text":"add color ggplot, default get colors see discrete variables blue color scheme continuous variables:warning message tells us 61 data points showing plot. Can tell ?okay, neither great, sometimes want specify color scheme. viridis package provides nice default color schemes, now built ggplot2.change color, used scale_color_viridis_c() instead scale_color_continuous(). viridis also provides color schemes, can change range color (example, often find lightest colors hard see white background):can also specify color gradients functions scale_color_gradient(), scale_color_gradient2(), scale_color_gradientn():discrete variables, viridis package also useful:RColorBrewer also provides number useful discrete color palettes, including ones specified color blind friendly:","code":"\nggplot(urban_data, aes(x = udiff_1000, y = r, color = YEAR)) +\n  theme_bw() +\n  geom_point() +\n  xlab(\"Difference in urban gradient (1 km)\") +\n  ylab(\"Effect size (r)\") +\n  scale_color_continuous(\"Year\")## Warning: Removed 61 rows containing missing values or values outside the scale range\n## (`geom_point()`).\nggplot(urban_data, aes(x = udiff_1000, y = r, color = YEAR)) +\n  theme_bw() +\n  geom_point() +\n  xlab(\"Difference in urban gradient (1 km)\") +\n  ylab(\"Effect size (r)\") +\n  scale_color_viridis_c(\"Year\")## Warning: Removed 61 rows containing missing values or values outside the scale range\n## (`geom_point()`).\ncowplot::plot_grid(\n  ggplot(urban_data, aes(x = udiff_1000, y = r, color = YEAR)) +\n    theme_bw() +\n    geom_point() +\n    xlab(\"Difference in urban gradient (1 km)\") +\n    ylab(\"Effect size (r)\") +\n    scale_color_viridis_c(\"Year\", option = \"magma\") +\n    ggtitle(\"Full color range\"),\n  ggplot(urban_data, aes(x = udiff_1000, y = r, color = YEAR)) +\n    theme_bw() +\n    geom_point() +\n    xlab(\"Difference in urban gradient (1 km)\") +\n    ylab(\"Effect size (r)\") +\n    scale_color_viridis_c(\"Year\", option = \"magma\", begin = 0, end = 0.7) +\n    ggtitle(\"Top of range removed\"),\n  nrow = 2\n)## Warning: Removed 61 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n## Removed 61 rows containing missing values or values outside the scale range\n## (`geom_point()`).\nggplot(urban_data, aes(x = udiff_1000, y = r, color = YEAR)) +\n  theme_bw() +\n  geom_point() +\n  xlab(\"Difference in urban gradient (1 km)\") +\n  ylab(\"Effect size (r)\") +\n  scale_color_gradient(\"Year\", low = \"red\", high = \"blue\") ## Warning: Removed 61 rows containing missing values or values outside the scale range\n## (`geom_point()`).\nggplot(urban_data, aes(x = host.class, y = r, fill = health)) +\n  geom_boxplot(width = 0.5) +\n  geom_hline(yintercept = 0) +\n  scale_x_discrete(\"Host taxon\", \n                   breaks = unique(urban_data$host.class), \n                   labels = str_to_sentence(unique(urban_data$host.class))) + \n  scale_y_continuous(\"Effect size (r)\", \n                     breaks = seq(from = -1, to = 1, by = 0.2)) +\n  scale_fill_viridis_d(\"Health metric\",\n                       breaks = unique(urban_data$health),\n                       labels = str_to_sentence(unique(urban_data$health)))\nRColorBrewer::display.brewer.all(colorblindFriendly = T)\nggplot(urban_data, aes(x = host.class, y = r, fill = health)) +\n  geom_boxplot(width = 0.5) +\n  geom_hline(yintercept = 0) +\n  scale_x_discrete(\"Host taxon\", \n                   breaks = unique(urban_data$host.class), \n                   labels = str_to_sentence(unique(urban_data$host.class))) + \n  scale_y_continuous(\"Effect size (r)\", \n                     breaks = seq(from = -1, to = 1, by = 0.2)) +\n  scale_fill_brewer(\"Health metric\",\n                    breaks = unique(urban_data$health),\n                    labels = str_to_sentence(unique(urban_data$health)),\n                    palette = \"Set2\")"},{"path":"data-presentation.html","id":"exporting-and-saving-plots","chapter":"12 Customizing Graphics with ggplot2","heading":"12.10 Exporting and saving plots","text":"Let’s say made beautiful plot:outputs Plots panel RStudio, want export elsewhere. Export button plot might tempting, doesn’t work well - resolution limited ’s reproducible. Instead, use ggsave():can output plot pdf, png, jpeg, etc., depend file extension supply. default, ggsave save last plot rendered, can also provide plot object plot argument. use Windows, remember close file trying write , get error.","code":"\nggplot(urban_data, aes(x = health, y = r)) +\n  geom_point(aes(color = host.class), position = position_dodge(width = 0.2), alpha = 0.5) +\n  stat_summary(shape = \"square\") +\n  geom_hline(yintercept = 0) +\n  annotate(\"text\", x = 0.1, y = 0, label = \"No effect\\n(r=0)\",\n           hjust = 0, vjust = 0.5) +\n  theme_bw() +\n  labs(x = \"Health metric\", y = \"Effect size (r)\",\n       title = \"Mean +/- SE by health metric\") +\n  scale_color_brewer(\"Host taxon\", palette = \"Dark2\") +\n  theme(text = element_text(size = 12), legend.position = \"bottom\") ## No summary function supplied, defaulting to `mean_se()`\nggsave(filename = \"figures/taxon_effect_plot.png\", \n       width = 7, height = 6, units = \"in\")## No summary function supplied, defaulting to `mean_se()`"},{"path":"tables.html","id":"tables","chapter":"13 Creating and Designing Data Tables","heading":"13 Creating and Designing Data Tables","text":"","code":""},{"path":"tables.html","id":"objectives-10","chapter":"13 Creating and Designing Data Tables","heading":"13.1 Objectives","text":"Summarize output data tabular formatFormat tables include necessary information interpretationOutput data R tabular form can used reports documents","code":""},{"path":"tables.html","id":"additional-reading-10","chapter":"13 Creating and Designing Data Tables","heading":"13.2 Additional reading","text":"Remshard, M., & Queenborough, S. . (2023). Design tables presentation communication data ecological evolutionary biology. Ecology Evolution, 13(7), e10062. https://doi.org/10.1002/ece3.10062","code":""},{"path":"tables.html","id":"tables-as-outputs","chapter":"13 Creating and Designing Data Tables","heading":"13.3 Tables as outputs","text":"Data visualization figures graphics usually effective way communicating information. Consider, example, data displayed figure table:figure, clearly see Gentoo penguins heavier two species, males heavier females species, fewer chinstrap penguins sampled two species. take minute get information table. However, tables better figures exact values important, lot information convey. example, can’t quite tell figure whether exact number males females sampled species. Overall, key applications tables :Providing exact valuesReporting statistical outputsReporting large data sets (often appendix)scientific publications, tables often formatted specific way - example, borders margins particular format. publishing world, formatting usually completed journal editorial team time publication. However, creating reports documents shared without professional editing, need know format tables R. typical scientific format table looks like :\nFigure 13.1: common data table format\nNotice table includes border lines header row border line table, vertical borders horizontal borders within data area. header row bold nothing else . formatting relatively straightforward achieve word processing programs can also achieved (little learning curve) directly R.","code":"\nlibrary(tidyverse)## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nlibrary(palmerpenguins)\n\ndat_summ <- penguins %>%\n  filter(!is.na(sex)) %>%\n  group_by(species, sex) %>%\n  summarize(n = n(),\n            body_mass_mean = mean(body_mass_g, na.rm = T),\n            body_mass_sd = sd(body_mass_g, na.rm = T))## `summarise()` has grouped output by 'species'. You can override using the\n## `.groups` argument.\ndat_summ %>%\n  ggplot(aes(x = species, y = body_mass_mean, \n             ymin = body_mass_mean - body_mass_sd, \n             ymax = body_mass_mean + body_mass_sd,\n             color = sex, size = n)) +\n  geom_pointrange() +\n  theme_bw() + theme(text = element_text(size = 14)) +\n  scale_size(\"Number of pengins\", range = c(0.5,2),\n             breaks = c(35,55,73)) +\n  scale_color_manual(\"Sex\", breaks = c(\"male\",\"female\"), \n                     values = c(\"darkgreen\", \"orange\")) +\n  labs(x = \"Species\", y = \"Body mass (mean +/- SD)\")\ndat_summ## # A tibble: 6 × 5\n## # Groups:   species [3]\n##   species   sex        n body_mass_mean body_mass_sd\n##   <fct>     <fct>  <int>          <dbl>        <dbl>\n## 1 Adelie    female    73          3369.         269.\n## 2 Adelie    male      73          4043.         347.\n## 3 Chinstrap female    34          3527.         285.\n## 4 Chinstrap male      34          3939.         362.\n## 5 Gentoo    female    58          4680.         282.\n## 6 Gentoo    male      61          5485.         313."},{"path":"tables.html","id":"writing-tables-to-files","chapter":"13 Creating and Designing Data Tables","heading":"13.4 Writing tables to files","text":"Although final formatting table might done word processor, first need get data R. covered lesson reading writing data. Since CSV file open easily spreadsheet program like Excel, can simply:save table CSV,open Excel,copy table Word, andadd borders alignment.However, since one benefit using scripting language like R can easily update analyses, helpful pre-format table much possible outputting. outputted data_summ now, fourth step also require rounding truncating numbers renaming columns. Every time updated analysis need update well, making process time-consuming , degree, less reproducible; example, record translation column names data.frame column names data presented. Ideally, rounding renaming writing data CSV:formatting details might want consider writing data file?","code":"\ndat_summ_out <- dat_summ %>%\n  rename(`No. birds` = n, \n         `Mean body mass (g)` = body_mass_mean,\n         `SD body mass` = body_mass_sd) %>%\n  rename_all(str_to_sentence) %>%\n  mutate(across(is.numeric, round)) #Let's talk about this one! What is this doing?## Warning: There was 1 warning in `mutate()`.\n## ℹ In argument: `across(is.numeric, round)`.\n## Caused by warning:\n## ! Use of bare predicate functions was deprecated in tidyselect 1.1.0.\n## ℹ Please use wrap predicates in `where()` instead.\n##   # Was:\n##   data %>% select(is.numeric)\n## \n##   # Now:\n##   data %>% select(where(is.numeric))\nwrite_csv(dat_summ_out, \"outputs/penguin_summary.csv\")"},{"path":"tables.html","id":"an-r-package-for-table-design-gt","chapter":"13 Creating and Designing Data Tables","heading":"13.5 An R package for table design: gt","text":"method useful table two place report. lot? amount extra time takes reformat (update every time something changes) might make worth investing automated solution. gt package provides just . flexible, allowing create complex, nested tables. Although bit learning curve using package, time investment pays produce lot tables.’s example penguin data gt format:formatting might little unexpected, ’s different saw . Now, instead repeating species across sex, table nested species. gt knew tibble/data frame grouped species:default dplyr maintains groups group_by() even summary done. ungroup table, case, output change:output image. copy document, wouldn’t embedded way table . Instead, can use gtsave() function given file ending save output format word processor.\nFigure 13.2: default gtable format Word\nNow format readable Word; click table, usual formatting options appear. Next, let’s work formatting table look exactly like manually created one. start , ’ll create object table can modify :usually write documents Times New Roman, first ’ll change font using opt_table_font() function, defines fonts entire table:Now change header row bold font. time use tab_style() function, since want change properties specific cells, entire table:Looking help funciton tab_style(), learned style argument need specify function like cell_text() cell_fill(), options within function. location argument indicates cells edit. , function starting cells_*, essentially selection argument. help functions useful find cells looking .Now work borders. workflow similar one used . First, remove borders using opt_* function, add borders back want using tab_style():’s left alignment. want left-align character columns right-align numeric columns.Notice wanted body cells column labels, specify combine list.Finally, let’s thing, grouped data. Now, need deal design choices related groups, first change font:Now, notice species line. typically include another column, ’ll using strategy found Stack Overflow page:Now can use lines alignment :Oops, ’s wanted. guess cells_column_labels() gives named columns, whereas species column longer name. Trying :stub area left table contains row labels, row group labels, /summary labels; case species group. cells_stubhead() function finds header cells, case top-leftmost cell table. Similarly, cells_row_groups() finds grouping rows; just want last one, use number species groups present (n_distinct(dat_summ_out$Species)).last example highlights one challenges gt: many options can hard find. documentation helpful. Also, understand basic structure functions, can try using autofill suggest options. example, know want select cell type don’t know ’s called, try typing ?cell_ checking options.Additional features gt include:FootnotesEmbedded title subtitleGrouped columns…note: time writing, formatting preserved perfectly across output formats gt (e.g., see Viewer exactly Word shows). fix progress.","code":"\nlibrary(gt)\ngt(dat_summ_out)\nclass(dat_summ_out)## [1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\"\ngroups(dat_summ_out)## [[1]]\n## Species\ndat_summ_out %>%\n  ungroup() %>%\n  gt()\ndat_summ_out %>%\n  gt() %>%\n  gtsave(\"outputs/penguin_bm_summary.docx\")\ngt_penguins <- gt(ungroup(dat_summ_out))\ngt_penguins <- opt_table_font(gt_penguins, font = \"Times\")\ngt_penguins\ngt_penguins <- tab_style(gt_penguins, \n                         style = cell_text(weight = \"bold\"), \n                         location = cells_column_labels())\ngt_penguins\ngt_penguins <- gt_penguins %>%\n  opt_table_lines(extent = \"none\") %>%\n  tab_style(style = cell_borders(sides = c(\"top\", \"bottom\")),\n            location = cells_column_labels()) %>%\n  tab_style(style = cell_borders(sides = \"bottom\"),\n            location = cells_body(rows = nrow(dat_summ_out))) #add bottom border to the last row\ngt_penguins\ngt_penguins <- gt_penguins %>%\n  tab_style(style = cell_text(align = \"left\"),\n            location = list(cells_column_labels(columns = c(\"Species\",\"Sex\")),\n                            cells_body(columns = c(\"Species\",\"Sex\"))))\ngt_penguins\ngt_penguins <- dat_summ_out %>%\n  gt() %>%\n  opt_table_font(font = \"Times\") %>%\n  tab_style(style = cell_text(weight = \"bold\"), \n                         location = cells_column_labels()) \ngt_penguins \ngt_penguins <- gt_penguins %>%\n  tab_options(row_group.as_column = TRUE)\ngt_penguins \ngt_penguins %>%\n  tab_style(style = cell_text(align = \"left\"),\n            location = list(cells_column_labels(columns = \"Sex\"),\n                            cells_body(columns = \"Sex\"))) %>%\n  opt_table_lines(extent = \"none\") %>%\n  tab_style(style = cell_borders(sides = c(\"top\", \"bottom\")),\n            location = cells_column_labels()) %>%\n  tab_style(style = cell_borders(sides = \"bottom\"),\n            location = cells_body(rows = nrow(dat_summ_out))) \ngt_penguins <- gt_penguins %>%\n  tab_style(style = cell_text(align = \"left\"),\n            location = list(cells_column_labels(columns = \"Sex\"),\n                            cells_body(columns = \"Sex\"))) %>%\n  opt_table_lines(extent = \"none\") %>%\n  tab_style(style = cell_borders(sides = c(\"top\", \"bottom\")),\n            location = list(cells_column_labels(), \n                            cells_stubhead())) %>%\n  tab_style(style = cell_borders(sides = \"bottom\"),\n            location = list(cells_body(rows = nrow(dat_summ_out)),\n                            cells_row_groups(groups = n_distinct(dat_summ_out$Species)))) \ngt_penguins"},{"path":"git.html","id":"git","chapter":"14 Version Control with Git and GitHub","heading":"14 Version Control with Git and GitHub","text":"\nFigure 3.1: Fairly accurate. (https://xkcd.com/1597/)\nlesson draws materials WILD 6900: Tools Reproducible Science, Spring 2021, Utah State University, Dr. Simona Picardi, published CC-4.0 license. Lesson elements Git/GitHub setup RStudio GUI based Carpentries’ Version Control Git workshop, also licensed CC-4.0.","code":""},{"path":"git.html","id":"objectives-11","chapter":"14 Version Control with Git and GitHub","heading":"14.1 Objectives","text":"Understand benefits challenges using Git version controlModify, stage, commit changes GitFetch push code /remote repository","code":""},{"path":"git.html","id":"the-what-and-why-of-version-control","chapter":"14 Version Control with Git and GitHub","heading":"14.2 The what and why of version control","text":"Git version control system. tracks changes make files allows go back previous versions far back time need. Git useful keeping organized can combined collaboration software (GitHub) make sharing code files easy. might folder looks something like :past self obviously better using consistent formatting dates (include year ), even done drawbacks approach:files takes space hard drive. Even small, add .don’t know changes made versions, hard go back old version find deleted modified code.can’t totally sure recent version. Sometimes, “date modified” doesn’t line date file. ?Git provides solution problem. Instead manually saving edits file separate copy “just case”, instead keep track recent version, can put files version control let Git keep track changes make. Using Git, one file script computer, log changes, including notes changed . example:\nFigure 14.1: Commit message examples\ncan also easily see changes made stage:\nFigure 4.1: diff example\nAdditional reading: https://swcarpentry.github.io/git-novice/01-basics.html","code":""},{"path":"git.html","id":"getting-started-with-git-and-github","chapter":"14 Version Control with Git and GitHub","heading":"14.3 Getting started with Git and GitHub","text":"","code":""},{"path":"git.html","id":"git-1","chapter":"14 Version Control with Git and GitHub","heading":"14.3.1 Git","text":"–> Follow instructions install Git.","code":""},{"path":"git.html","id":"github","chapter":"14 Version Control with Git and GitHub","heading":"14.3.2 GitHub","text":"GitHub extends Git collaboration (including syncing across devices, applicable). Two people can repository computers, sync changes remote repository (called fetching/pulling pushing). process, can see changes collaborator made identify conflicts, example edited code time.make GitHub account:Go https://github.com follow “Sign ” link top-right window.Follow instructions create account.Verify email address GitHub.Configure multifactor authentication. can use Duo authenicator app already .","code":""},{"path":"git.html","id":"guis","chapter":"14 Version Control with Git and GitHub","heading":"14.3.3 GUIs","text":"easy -ramp using Git, use graphical user interface (GUI) within RStudio. GUIs provide point--click interfaces. applications use provide GUI - don’t type commands work. lesson, use GUI side--side command-line method can see works best . GUI limited functionality good place get familiar principles version control moving advanced applications.addition RStudio GUI, another good option GitHub Desktop. functionality limited GUIs easy get started:–> Download install GitHub Desktop","code":""},{"path":"git.html","id":"basic-git-structure-and-commands","chapter":"14 Version Control with Git and GitHub","heading":"14.4 Basic Git structure and commands","text":"central commands using Git :git init: Creates new empty repository current directorygit add: Sends new changed file working directory staging areagit commit: Sends staged file local repositoryWhen using remote repository GitHub (another platform, add):git push: Sends changes local repository remote repositorygit fetch: Gets changes remote repository compares local repository (nothing local files)git pull: Gets changes remote repository makes corresponding changes local files","code":""},{"path":"git.html","id":"using-git-in-the-command-line","chapter":"14 Version Control with Git and GitHub","heading":"14.5 Using Git in the command line","text":"section mostly copied, minimal editing, materials WILD 6900: Tools Reproducible Science","code":""},{"path":"git.html","id":"the-command-line","chapter":"14 Version Control with Git and GitHub","heading":"14.5.1 The command line","text":"can use Git command line computer’s terminal. command line can intimidating haven’t used , using Git requires basic familiarity . Commands slightly different operating systems (Windows vs. Mac/Linux).open terminal (command prompt) computer, ’ll see symbol, many computers “$” “>”, followed blinking cursor. symbol called prompt, means terminal waiting input. copy-paste code chapter terminal, make sure copy part prompt (don’t copy >). Also, Ctrl+V work terminal, can right-click paste (Cmd+V work Mac).open terminal, automatically located root directory file system (home directory, computer multiple users). Mac, usually look likeAnd WindowsTo move around directories use command cd, stands “change directory”. example, move Research subfolder Documents folder, might type :go directory, use “..”. following command take back Documents folder:","code":"COMPUTER-NAME: ~username$C:\\Users\\username>cd Documents/Researchcd .."},{"path":"git.html","id":"configuring-git-one-time-only","chapter":"14 Version Control with Git and GitHub","heading":"14.5.2 Configuring Git (one time only)","text":"command line, Git commands written git verb options, verb actually want options additional optional information may needed verb. set Git first time:user name email associated subsequent Git activity, means changes pushed GitHub, BitBucket, GitLab, etc. include information. email address used one used setting account. configuration options can personalize, won’t get . want check configuration options active, can use:","code":"git config --global user.name \"My name\"\ngit config --global user.email \"myemail@uga.edu\"git config --list"},{"path":"git.html","id":"creating-a-repository-one-time-per-project","chapter":"14 Version Control with Git and GitHub","heading":"14.5.3 Creating a repository (one time per project)","text":"create repository (words, put directory version control), first navigate directory. , create repository class.side note: spaces directory names (example, directories OneDrive), need put path quotes. Otherwise, terminal thinks spaces indicate new argument command.Now enable Git start tracking everything inside folder:command initializes Git. won’t immediately notice changes directory, show hidden files file explorer notice new subfolder called .git. folder Git store version control information. don’t worry content folder.","code":"cd Documents/Classes/FANR8950_Fall2025git init"},{"path":"git.html","id":"staging-files","chapter":"14 Version Control with Git and GitHub","heading":"14.5.4 Staging files","text":"Creating repository enables Git start tracking files within , happen automatically. tell Git files want track. can check Git tracking far using:bottom, ’ll see list untracked files. need switch tracking . begin tracking new file, use verb ‘add’. example, track file named “exercise2.R” type:works well want add specific file. want start tracking whole content folder, can :","code":"git status git add exercise2.Rgit add --all"},{"path":"git.html","id":"ignoring-files","chapter":"14 Version Control with Git and GitHub","heading":"14.5.5 Ignoring files","text":"Git optimized work plain text files (example .txt R scripts), doesn’t really understand binary files (Word files PDFs stored, example). Also, files typically need version controlled, images; fact, large files, version controlling images can end clogging workflow. Make sure always aware exactly ’re adding use ‘git add –’. doubt, add files one one. can set rules exclude types files individual files don’t want track. rules thumb:File encoding (plain-text vs. binary): Git track changes within binary files, , even though can store files version control, won’t able use Git compare different version, ’s really point tracking ;Code-generated: anything can reproduced running code need version-controlled;Size: files big slow functioning Git. benchmark, can keep mind maximum size limit enforced GitHub, 100 MB – follow two criteria , rarely end problem 100 MB’s worth plain-text files whole lot plain text.can create text file called “.gitignore” repository using default text editor (Notepad Windows, TextEdit MacOS, etc). name must exactly “.gitignore” Git recognize . file must extension (.e., .txt) go ahead delete (don’t worry warnings)..gitignore created, can start adding rules. Nothing prevents us listing files .gitignore one one, approach efficient. Instead, can use pattern matching kill many birds one stone. files common either .jpg’s .docx’s. can use wildcard ’*’ signify “character” file extension:exclude .jpg .docx file tracked Git repository. Since images conveniently located together one folder, can also just :also add following rules ignore user-specific R project files:can add many rules like, save .gitignore text file ’re done. Now, didn’t forget include anything needed ignored, can safely add files one go:","code":"\\*.jpg  \n\\*.docx  figures/\\*.Rhistory   \n/.Rproj.user/  git add --all"},{"path":"git.html","id":"committing-files","chapter":"14 Version Control with Git and GitHub","heading":"14.5.6 Committing files","text":"Now files staged, ready send local repository. called committing. commit snapshot repository looked like time committed. commit file, save version forever able go back . Remember, many steps beyond clicking “Save” script - commit file feel made significant changes might want go back (undo).first commit, use following command:commit accompanied message, added flag -m. message describe changes made file/s since previous commit. good habit write detailed commit messages, need go back recover previous version file, can read history commits easily find version looking .next edit files, need repeat process: move staging area commit changes.","code":"git commit -m \"First commit\""},{"path":"git.html","id":"un-staging-files","chapter":"14 Version Control with Git and GitHub","heading":"14.5.7 Un-staging files","text":"Staging initially seems like annoying extra step, serves good check process commit something (committing permanent!). following command un-stages files saves us commit :can use pattern matching well, ’ll need put backslash front wildcard:cases, probably want add file names extensions .gitignore file.","code":"git rm --cached filenamegit rm --cached \\*.jpg"},{"path":"git.html","id":"accessing-file-histories","chapter":"14 Version Control with Git and GitHub","heading":"14.5.8 Accessing file histories","text":"Git allow recover previous versions tracked file time committed. can access history commits using:string numbers letters following word ‘commit’ log called hash uniquely identifies commit. wanted revert version data manipulation lesson split two, use:commit messages helpful like, want detail, can also ask line--line comparison old new versions file using git diff. Text added preceded “+” text deleted “-”.","code":"git loggit checkout 91568057d886b9b2cf9966ccbd82c4fd51ba119f -- data_manipulation.Rmdgit diff version-control-git-github.Rmd"},{"path":"git.html","id":"using-git-with-guis","chapter":"14 Version Control with Git and GitHub","heading":"14.6 Using Git with GUIs","text":"just learned use Git hard way. Two common GUIs can make process easier visualize, although provide fewer advanced functions. find GUIs especially helpful looking history working GitHub. One GUI even built RStudio.","code":""},{"path":"git.html","id":"rstudio","chapter":"14 Version Control with Git and GitHub","heading":"14.6.1 RStudio","text":"RStudio integrates Git R projects. work scripts part project luckily, already created project class. followed instructions , open project, probably already see “Git” tab “Environment” panel RStudio. don’t (want go another route next project), can initiate version control project options:version control set , see “Git” menu Source panel Git tab Environment panel.Using “Commit” menu, can easily stage changes, write commit messages, see changes committed:also see “Pull” “Push” buttons available top-left corner menu. grayed haven’t get set repository remote repository (e.g., GitHub). set later.","code":""},{"path":"git.html","id":"other-guis","chapter":"14 Version Control with Git and GitHub","heading":"14.6.2 Other GUIs","text":"Many GUIs similar functionality RStudio’s GUI, check boxes stage, type messages box, click commit. main difference GitHub Desktop doesn’t require R project established works outside RStudio, can helpful working files outside R don’t want open RStudio just use Git.","code":""},{"path":"git.html","id":"adding-a-remote-repository-github","chapter":"14 Version Control with Git and GitHub","heading":"14.7 Adding a remote repository (GitHub)","text":"section mostly copied, minimal editing, materials WILD 6900: Tools Reproducible ScienceA remote repository copy repository stored elsewhere local copy. cases, collaborating, ’ll copy repository machine (local repository) copy server accessible others (remote repository). remote repository can hosted GitHub.two ways set local remote repositories interact.Set local first link remote later.Create remote first “clone ” computer get local copy.’re starting brand new repository can go either way, first approach wanted link repository already exists local machine GitHub repository.","code":""},{"path":"git.html","id":"adding-a-remote-to-a-local-repository","chapter":"14 Version Control with Git and GitHub","heading":"14.7.1 Adding a remote to a local repository","text":"Starting existing Git repository computer, can link GitHub counterpart adding remote URL. set URL, go GitHub website, click ‘+’ sign top-right corner select ‘New Repository’.Follow steps create new repository, giving name folder computer (isn’t necessary, helpful). Make sure add README, .gitignore, license file. repository empty created conflict files local repository.connect local remote repositories, can copy URL remote repository run command terminal (, navigating location local repository):‘Origin’ conventional name given remote repository. use name, since GitHub uses ‘origin’ default name creating repository website, using convention make easier follow help guides online. GUIs also allow menus.","code":"git remote add origin https://github.com/cteitel/myrepo.git"},{"path":"git.html","id":"pushing-to-a-remote-repository","chapter":"14 Version Control with Git and GitHub","heading":"14.7.2 Pushing to a remote repository","text":"Now linked local remote repository, look repository GitHub page, won’t see files . First, need “push” cope local files remote repository. first time push, ’s good idea specify branch Git use default remote local main branch future. adding flag ‘-u’ (upstream), followed name remote name local branch want link :set upstream first time push certain branch. upstream set , able just push changes remote repository :git pushYou prompted GitHub credentials. may asked use personal access token, case need follow instructions.push, files committed transferred two repositories mirror . keep remote repository synchronized local, time commit changes tracked files also need push .next lesson, expand skills learn use GitHub collaborate others share projects.","code":"git push -u origin main"},{"path":"github.html","id":"github","chapter":"15 Collaboration with GitHub (or friends)","heading":"15 Collaboration with GitHub (or friends)","text":"","code":""},{"path":"github.html","id":"objectives-12","chapter":"15 Collaboration with GitHub (or friends)","heading":"15.1 Objectives","text":"Clone fork repositories GitHubUnderstand merge conflicts, resolve , avoid themWork branches repositories","code":""},{"path":"github.html","id":"collaboration-on-code","chapter":"15 Collaboration with GitHub (or friends)","heading":"15.2 Collaboration on code","text":"previous lesson, learned manage code using version control sync remote repository. probably bulk version control. However, many benefits using version control magnify collaborating others code. example:Code often builds , single small change can change entire workflow (break script).Unlike word processing programs, limited opportunity “track changes” code.section code usually depends comes , isn’t usually feasible collaborators write code chunks separately combine later.rest lesson copied, minimal editing images links, materials WILD 6900: Tools Reproducible Science, Spring 2021, Utah State University, Dr. Simona Picardi, published CC-4.0 license.","code":""},{"path":"github.html","id":"cloning-a-repository","chapter":"15 Collaboration with GitHub (or friends)","heading":"15.2.1 Cloning a repository","text":"way get local-remote repository pair set create GitHub repository first clone computer. case, doesn’t matter whether remote repository empty . Cloning repository also useful collaborating project someone repository. collaborator/s can copy repository computers cloning shared remote repository, synchronized changes made anyone team. person created repository need add others collaborators ’re able clone .clone repository, open terminal navigate folder want download . use following command:repository copied computer folder specified.","code":"git clone https://github.com/cteitel/hello-world.git"},{"path":"github.html","id":"synchronizing-changes-among-collaborators","chapter":"15 Collaboration with GitHub (or friends)","heading":"15.3 Synchronizing changes among collaborators","text":"inverse pushing pulling, transfers files changes remote repository local one:working collaborators shared GitHub repository, periodically need pull make sure local copy synchronized changes somebody else might made. always need pull push changes, Git won’t allow push remote repository changes don’t local copy. therefore good practice pull changes starting work. two repositories already --date try pull, nothing happen changes remote repository aren’t already local.collaborator makes change conflict committed local repository, try pull going encounter merge conflict. Merge conflicts occur two collaborators work file time. GitHub know automatically reconcile changes file (?), throw error ’ll need resolve manually.","code":"git pull "},{"path":"github.html","id":"resolving-conflicts","chapter":"15 Collaboration with GitHub (or friends)","heading":"15.4 Resolving conflicts","text":"deal merge conflicts eventually likely working collaborative projects, can handled resolved without much pain.two collaborators edit file time without pulling ’s changes first, one tries push changes remote get error message looks like :Git rejecting push found updates remote repository incorporated local copy. solve , person got error need pull recent changes, merge current copy, push resulting file.pulling, open file conflict , ’ll find Git erase one person’s changes favor ’s; instead, marked lines conflicting changes occur. beginning end problematic chunk highlighted, two versions separated ‘=’ signs.\nFigure 4.1: Merge conflict R Markdown document\nNow us reconcile changes however consider appropriate. keep changes, keep changes made collaborator, write something new replace , delete change entirely. conflict removed file saved, can proceed usual staging file, committing , pushing . Now, collaborators pulls repository , get merged version file.cases, collaborators make simultaneous changes file mutually exclusive – example, one person delete line code another person edit line. However, changes don’t need mutually exclusive merge conflict happen: time two users edit line file time, Git going play safe call merge conflict regardless whether changes contradict . Conflict resolution requires user verify whether changes affect can stay .","code":"To https://github.com/picardis/myrepo.git\n ! [rejected]        master -> master (fetch first)\nerror: failed to push some refs to 'https://github.com/picardis/myrepo.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."},{"path":"github.html","id":"avoiding-conflicts","chapter":"15 Collaboration with GitHub (or friends)","heading":"15.5 Avoiding conflicts","text":"Merge conflicts need manually resolved person, time-consuming. importantly, person resolves merge conflicts making judgement call best way fixing situation. introduce subjective judgement calls perhaps weakest spot entire collaborative version control workflow. Preventing conflicts happening first place better fix . things can help prevent merge conflicts:Pull often: decreases probability working version --date;Make small frequent commits: decreases probability recent changes people’s working version;Organize code small modules: decreases probability two users working file;Working branches forks… next sections.","code":""},{"path":"github.html","id":"working-with-branches","chapter":"15 Collaboration with GitHub (or friends)","heading":"15.6 Working with branches","text":"default, new repository contains single branch: main branch. However, can create new branches within repository. branch like parallel universe changes make files exist branch affect main branch. Branches allow freely experiment editing files code without affecting original project ’re ready merge .command create branch called “-branch” :can also click “New Branch” button RStudio.start working new branch, switch following command:verify branch ’re , can use ‘git log’ (’ve used command look commit history):word ‘HEAD’ output git log called pointer; tells us branch ’re currently working . creation, new branch shares commit history main branch moment branch created. , two commit histories allowed diverge. changes commit branch effective branch affect others. takes pressure making changes code potentially break workflow downstream. ’ve chance verify changes work way want , can merge branches back one.merge changes made branch main branch use:can delete ‘-branch’ branch longer needed:conflicting changes two branches trying merge, Git halt process issue merge conflict similar seen .","code":"git branch my-branchgit checkout my-branchgit log git merge my-branchgit branch -d my-branch"},{"path":"github.html","id":"forking-a-repository","chapter":"15 Collaboration with GitHub (or friends)","heading":"15.7 Forking a repository","text":"Forking repository means creating copy existing repository can make changes without affecting original repository. can technically fork repository, forking mostly used get copy somebody else’s repository. example, want contribute project created person don’t know, want build code something similar need , can fork repository work without copy affected.cool thing forking , owner makes changes repository, can pull changes fork copy repository stays sync original. Also, can contribute changes submitting original repository pull requests. main difference forking cloning somebody else’s repository: cloning, won’t able update copy include new changes made original won’t able contribute back unless ’re added collaborator.Unlike functionalities seen far, Git commands, forking GitHub functionality. built-Git function fork repository command line. fork repository, go web page repository click “Fork” top-right corner. create copy repository GitHub account.\nFigure 15.1: Fork GitHub repository\nrepository now GitHub account. also want local copy repository computer, can clone fork. example, forked octocat’s Spoon-Knife repository onto GitHub account, clone onto computer like :keep fork --date original repository, can configure follows:Now able pull original repository keep local copy synchronized. won’t able push collaborator privileges repository.","code":"git clone https://github.com/picardis/Spoon-Knifegit remote add upstream https://github.com/octocat/Spoon-Knife.git"},{"path":"github.html","id":"pull-requests","chapter":"15 Collaboration with GitHub (or friends)","heading":"15.8 Pull requests","text":"Pull requests way ask edits made fork (branch) get merged original repository (main branch). ask owner repository view potentially integrate changes made forked version, submit pull request. Similarly, let collaborators know edits made let review get merged, submit pull request. key difference : external agent choice submitting pull request merge fork repository, collaborator simply merge edits wanted . working repository , need go pull requests merge branch. collaborating people, still good courteous practice use pull requests heads-merge changes, others project can review approve .straightforward way submit pull request GitHub website. start pull request, must changes committed repository branch want merge . can go repository page GitHub click ‘Pull requests’ tab, click ‘New pull request’. Choose target branch, enter title description, click ‘Send pull request’. pull request open, everyone can write comments , see commits includes, look changes proposes within files.everyone happy proposed changes, ready merge pull request. merge conflicts, see ‘Merge pull request’ button.","code":""},{"path":"github.html","id":"references","chapter":"15 Collaboration with GitHub (or friends)","heading":"15.9 References","text":"GitHub Community Forum: https://github.community/","code":""},{"path":"markdown.html","id":"markdown","chapter":"16 Reproducible Reports with R Markdown and Quarto","heading":"16 Reproducible Reports with R Markdown and Quarto","text":"\nFigure 16.1: R Markdown makes music text, code, output. Artwork Allison Horst\n","code":""},{"path":"markdown.html","id":"objectives-13","chapter":"16 Reproducible Reports with R Markdown and Quarto","heading":"16.1 Objectives","text":"Integrate code, text, output R Markdown Quarto documentsFormat text R Markdown Quarto documents, including complex characters code outputsCustomize output display R Markdown Quarto documents","code":""},{"path":"markdown.html","id":"additional-reading-11","chapter":"16 Reproducible Reports with R Markdown and Quarto","heading":"16.2 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 28: Quarto. Available: https://r4ds.hadley.nz/quarto.htmlHadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (1e). Chapter 27: R Markdown Available: https://r4ds.hadley.nz/quarto.htmlGetting Started Quarto RStudio: https://quarto.org/docs/get-started/hello/rstudio.html","code":""},{"path":"markdown.html","id":"why-use-r-markdownquarto","chapter":"16 Reproducible Reports with R Markdown and Quarto","heading":"16.3 Why use R Markdown/Quarto?","text":"already used R Markdown course. homework assignemnts R Markdown documents, probably understand concept integrating code, text, output. lesson, go deeper many options ways use documents.side note: refer Markdown Quarto lesson. two slightly different ways coming type report. Quarto newer eventually supercede R Markdown; contains features R Markdown, plus . importantly, R Markdown works RStudio, whereas Quarto can work another code editor - useful collaborate someone uses software. Quarto new, always much documentation, rapidly improving.Beyond homework assignments HTML documents, Quarto/Markdown can produce slide show presentations, Word documents, PDFs, can used embed interactive features like maps. entire book written using Markdown! benefits writing Quarto :can easily integrated Git (version control rather Track Changes)easy share collaborateI don’t save plots manually paste documentCode text one place","code":""},{"path":"markdown.html","id":"basic-elements-of-a-quarto-document","chapter":"16 Reproducible Reports with R Markdown and Quarto","heading":"16.4 Basic elements of a Quarto document","text":"","code":""},{"path":"markdown.html","id":"quarto-documents-in-rstudio","chapter":"16 Reproducible Reports with R Markdown and Quarto","heading":"16.4.1 Quarto documents in RStudio","text":"Quarto document file extension .qmd. (R Markdown documents extension .Rmd.) process exporting document publishable format (.pdf, .html, etc.) called “knitting” “rendering”.create Quarto document RStudio, use File menu:\nFigure 3.1: First, select new Quarto document\n\nFigure 13.1: parameters can changed later. Click “Create”\nQuarto document open, can toggle two views: Source Visual. Source “code-like”, visual editor includes point--click formatting tools preview formatting. toggle two, can see formatting translated Markdown language.\nFigure 14.1: Two views Quarto\nmentioned , documents fundamentally three types information: text, code, output. entire document also governed header tells Quarto formatting output, example whether document HTML PDF, whether include table contents, etc.","code":""},{"path":"markdown.html","id":"text","chapter":"16 Reproducible Reports with R Markdown and Quarto","heading":"16.4.2 Text","text":"can type Quarto document just like text editor. can also add inline code using syntax `r some_code_here`. code run displayed normal text. can helpful want insert results summary statistics within sentence, example. create text looks like code isn’t executed, just leave “r”. example, mention functions packages book.can also format text source editor. Toggling source visual editors can help learn details, common formatting options :text surrounded asterixes (*text*) creates italicstext surrounded double asterixes (**text**) creates boldtext preceded “>” beginning line creates block quoteblock quoteTo create bulleted numbered list, start new line “*“,”-“, number. Numbering automatic even list order…can start every item ”1.” render ordered list!types text explore include equations, non-Latin symbols, color formatting.","code":""},{"path":"markdown.html","id":"code-and-output","chapter":"16 Reproducible Reports with R Markdown and Quarto","heading":"16.4.3 Code and Output","text":"Code Quarto documents units called chunks, denoted tick marks curly braces ({}), within can specify options. basic, need specify language (case, always r, can incorporate python code documents):\nFigure 4.1: code chunk.\ncan run code chunk clicking Run icon (play button top-right chunk). can also run line code individually “normal” R script. RStudio displays results inline code, can change options prefer use Viewer pane.can insert new code chunk using Insert menu Visual editor (Insert –> Executable cell –> R), typing ticks brackets Source editor, keyboard shortcut Cmd + Option + / Ctrl + Alt + .Within code chunk, can also customize outputs using options. example, option echo indicates whether code show document (echo=TRUE) output displayed (echo=FALSE). many options describe , two ways enter – either within curly brackets (typical Markdown) line beginning code chunk preceded #|.\nFigure 4.2: Setting options\n’s looks like actual document. Notice header show :common options:label: adds name code chunk, show menu bottom code editor.eval: TRUE/FALSE, indicates whether code executed . can use “comment ” entire code chunk.include: runs code show output. option helpful data-processing steps don’t need displayed.full list options available : https://yihui.org/knitr/options.","code":"\n#this is some code\nnew_obj <- 1"},{"path":"markdown.html","id":"header","chapter":"16 Reproducible Reports with R Markdown and Quarto","heading":"16.4.4 Header","text":"Sometimes, want specify options entire document instead code chunk. header comes . see called “YAML header” “YAML” language - don’t worry, ’s easily human-readable.initiate new Quarto document, header looks like appear:can add chunk options execute:can change formatting format. example, add table contents:Unlike R code, indenting helpful required, YAML reads indents subsections, make sure follow conventions. Quarto documentation shows many options document formatting output control.","code":"title: \"Untitled\"\nformat: htmltitle: \"Untitled\"\nformat: html\nexecute:\n  echo: falsetitle: \"Untitled\"\nformat: \n  html:\n    toc: true\nexecute:\n  echo: false"},{"path":"qaqc.html","id":"qaqc","chapter":"17 Data Cleaning in R","heading":"17 Data Cleaning in R","text":"","code":""},{"path":"qaqc.html","id":"objectives-14","chapter":"17 Data Cleaning in R","heading":"17.1 Objectives","text":"Fix issues related reading data data formattingSummarize visualize data identify likely errorsResolve missing data using tools R","code":""},{"path":"qaqc.html","id":"principles-of-data-cleaning","chapter":"17 Data Cleaning in R","heading":"17.2 Principles of data cleaning","text":"Many tools use clean data R functions approaches already covered. Learning use approaches identify, fix, document errors data key part reproducible workflow. Although fix many issues manually Excel, programatically provides record methods changes. also allows use approaches , less effort time.","code":""},{"path":"qaqc.html","id":"fixing-issues-with-data-entry-and-reading-data","chapter":"17 Data Cleaning in R","heading":"17.3 Fixing issues with data entry and reading data","text":"errors data come inconsistencies data entry, incompatibility data entry way R reads data. One issue can encounter even getting data R deals special characters (.e., symbols). “encoded,” meaning replaced code rather read symbol . part, symbols aren’t keyboard, like Greek letters (case) degree sign.can change encoding R expects additional argument:case, usually find easiest play around encoding options something works - ’s work figure encoding original file, information sometimes unavailable.","code":"\nlibrary(tidyverse)## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nfish <- read.csv(\"data/raw/messy_georgia_fish_data.csv\") ## Error in type.convert.default(data[[i]], as.is = as.is[i], dec = dec, : invalid multibyte string at '<a1>07'<35>9.2\"N, 84<a1>37'27.8\"W'\nfish <- read.csv(\"data/raw/messy_georgia_fish_data.csv\", fileEncoding = \"latin1\") "},{"path":"qaqc.html","id":"column-names","chapter":"17 Data Cleaning in R","heading":"17.3.1 Column names","text":"R rules column names: contain spaces symbols start numbers. read data file characteristics, R best fix - usually way like. case read_csv read.csv act differently: read_csv creates tibble, can handle spaces, symbols, numbers long referenced tick marks (), read.csv rename columns.Side note: Notice need include encoding read_csv(). ’s little likely read.csv() figure encoding default.Although read_csv works little better , ’s still annoying access columns ticks, won’t work functions. rename() function dplyr becomes useful . rename_with() function allows us rename multiple columns using rule:syntax rename_with() function introduces couple new ways working tidyverse functions. Often, summarize(), rename(), expect function second argument. function preceded tilde (~) using .x argument tells R use column names.Also note renamed data fish_in fish. can help want compare clean raw data later.might also want follow general best practices get rid capital letters:another way using functions. don’t require arguments, can just include function name (without ~). code :","code":"\nfish_base <- read.csv(\"data/raw/messy_georgia_fish_data.csv\", fileEncoding = \"latin1\") \nnames(fish_base)##  [1] \"Sample.ID\"        \"Common.Name\"      \"Scientific.Name\"  \"Fish.Length..mm.\"\n##  [5] \"Date.Collected\"   \"Sample.Location\"  \"Coordinates\"      \"X1st.Method.Used\"\n##  [9] \"X2nd.Method.Used\" \"Notes\"\nfish_in <- read_csv(\"data/raw/messy_georgia_fish_data.csv\")## Rows: 52 Columns: 10\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (8): Common Name, Scientific Name, Date Collected, Sample Location, Coor...\n## dbl (2): Sample ID, Fish Length (mm)\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nnames(fish_in)##  [1] \"Sample ID\"        \"Common Name\"      \"Scientific Name\"  \"Fish Length (mm)\"\n##  [5] \"Date Collected\"   \"Sample Location\"  \"Coordinates\"      \"1st Method Used\" \n##  [9] \"2nd Method Used\"  \"Notes\"head(fish_in$1st Method Used) #returns an error\nhead(fish_in$`1st Method Used`)## [1] NA              \"Seine\"         \"Trawl\"         \"Seine\"        \n## [5] NA              \"Hook and line\"\nfish <- rename(fish_in, Method1 = `1st Method Used`,\n               Method2 = `2nd Method Used`)\nnames(fish)##  [1] \"Sample ID\"        \"Common Name\"      \"Scientific Name\"  \"Fish Length (mm)\"\n##  [5] \"Date Collected\"   \"Sample Location\"  \"Coordinates\"      \"Method1\"         \n##  [9] \"Method2\"          \"Notes\"\nfish <- rename_with(fish, ~str_replace_all(.x, \" \", \"_\"))\nfish <- rename_with(fish, ~str_remove_all(.x, \"[)]|[(]\"))\nnames(fish)##  [1] \"Sample_ID\"       \"Common_Name\"     \"Scientific_Name\" \"Fish_Length_mm\" \n##  [5] \"Date_Collected\"  \"Sample_Location\" \"Coordinates\"     \"Method1\"        \n##  [9] \"Method2\"         \"Notes\"\nfish <- rename_with(fish, str_to_lower)\nnames(fish)##  [1] \"sample_id\"       \"common_name\"     \"scientific_name\" \"fish_length_mm\" \n##  [5] \"date_collected\"  \"sample_location\" \"coordinates\"     \"method1\"        \n##  [9] \"method2\"         \"notes\"\nfish <- rename_with(fish, ~str_to_lower(.x))"},{"path":"qaqc.html","id":"multi-format-columns","chapter":"17 Data Cleaning in R","heading":"17.3.2 Multi-format columns","text":"Sometimes, data entered way R tell appropriate format. case, often end character column almost anything can converted character without losing information. can check format columns using str() glimpse() tidyverse.looks like problems two columns: date_collected date coordinates really two columns (latitude longitude). Just looking first elements date_collected, looks like ’s month/day/year format, let’s try :warning tells us 25 elements month/day/year format. Let’s look detail:looks like formats. Luckily, lubridate treats names months numbers, don’t worry . if_else() comes . Since mdy() returns NA can’t parse date, can take advantage :logic first use one method parse dates. doesn’t work, use another - apply dates first method returned NA, source date parse original date column. still get lot warnings go NAs. also still five NAs, looking closely, missing dates original data:","code":"\nglimpse(fish)## Rows: 52\n## Columns: 10\n## $ sample_id       <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 11, 14, 15,…\n## $ common_name     <chr> \"Bluegill\", \"Brown Bullhead\", \"Redbreast Sunfish\", \"Re…\n## $ scientific_name <chr> \"Lepomis macrochirus\", \"Ameiurus nebulosus\", \"Lepomis …\n## $ fish_length_mm  <dbl> NA, 160, 9999, 9999, 201, 521, 9999, 9999, 750, 10000,…\n## $ date_collected  <chr> \"10/4/24\", \"10/4/24\", \"10/4/24\", \"10/4/24\", \"10/4/24\",…\n## $ sample_location <chr> \"?\", NA, \"Lake Allatoona\", NA, \"Chattahoochee@CRNRA\", …\n## $ coordinates     <chr> NA, NA, \"34\\xa107'59.2\\\"N, 84\\xa137'27.8\\\"W\", NA, \"33\\…\n## $ method1         <chr> NA, \"Seine\", \"Trawl\", \"Seine\", NA, \"Hook and line\", \"H…\n## $ method2         <chr> \"Gill net\", \"Gill net\", \"Trawl\", \"Gill net\", \"Hook and…\n## $ notes           <chr> \"Unknown location\", NA, NA, NA, NA, NA, NA, NA, NA, NA…\nfish <- mutate(fish, date = mdy(date_collected))## Warning: There was 1 warning in `mutate()`.\n## ℹ In argument: `date = mdy(date_collected)`.\n## Caused by warning:\n## !  25 failed to parse.\nsum(is.na(fish$date))## [1] 30\nunique(fish$date_collected)##  [1] \"10/4/24\"    \"7/5/24\"     \"19-Jun-24\"  \"6/4/24\"     \"6/17/24\"   \n##  [6] \"25-Jun-24\"  \"4/27/24\"    NA           \"5/21/24\"    \"29/06/2024\"\n## [11] \"6/29/24\"    \"4/29/24\"    \"24-Apr-24\"  \"6-May-24\"   \"4/5/24\"    \n## [16] \"22/05/2024\" \"5/23/24\"    \"9/4/24\"     \"28/05/2024\" \"4-Apr-24\"  \n## [21] \"8-May-24\"   \"10-Apr-24\"  \"22/06/2024\" \"2-Jun-24\"   \"30/05/2024\"\n## [26] \"16/05/2024\" \"5/29/24\"    \"15-May-24\"  \"18-Jun-24\"  \"4/21/24\"   \n## [31] \"28/04/2024\" \"26-Jun-24\"  \"12/6/24\"    \"5/28/24\"    \"19/06/2024\"\n## [36] \"13-Apr-24\"\nfish <- mutate(fish, date = mdy(date_collected),\n               date = if_else(is.na(date), dmy(date_collected), date),\n               date = if_else(is.na(date), ymd(date_collected), date))## Warning: There were 3 warnings in `mutate()`.\n## The first warning was:\n## ℹ In argument: `date = mdy(date_collected)`.\n## Caused by warning:\n## !  25 failed to parse.\n## ℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings.\nsum(is.na(fish$date))## [1] 5\nfilter(fish, is.na(date)) %>%\n  select(date_collected)## # A tibble: 5 × 1\n##   date_collected\n##   <chr>         \n## 1 <NA>          \n## 2 <NA>          \n## 3 <NA>          \n## 4 <NA>          \n## 5 <NA>"},{"path":"qaqc.html","id":"strings-and-special-characters","chapter":"17 Data Cleaning in R","heading":"17.3.3 Strings and special characters","text":"coordinates column highlights another issue: R read special character (degree symbol) eventually, doesn’t look right doesn’t provide us information ; don’t usually include units within data.coordinates also appear combination degrees-minutes-seconds format rather decimal degrees. , need split latitude longitude, split apart components, use calculate decimal degrees:lot steps. ’s probably package , know basics can faster use figure syntax new functions.","code":"\nhead(fish$coordinates)## [1] NA                                    \n## [2] NA                                    \n## [3] \"34\\xa107'59.2\\\"N, 84\\xa137'27.8\\\"W\"  \n## [4] NA                                    \n## [5] \"33\\xa159'12.48\\\"N, 84\\xa119'25.32\\\"W\"\n## [6] \"34\\xa1 7'59.16\\\"N, 84\\xa137'27.84\\\"W\"\nfish <- fish %>%\n  mutate(latitude = str_split_fixed(coordinates, pattern = \",\", n = 2)[,1],\n         longitude = str_split_fixed(coordinates, \",\", 2)[,2])\nselect(fish, latitude, longitude) %>% head()## # A tibble: 6 × 2\n##   latitude            longitude           \n##   <chr>               <chr>               \n## 1  <NA>               \"\"                  \n## 2  <NA>               \"\"                  \n## 3 \"34\\xa107'59.2\\\"N\"  \" 84\\xa137'27.8\\\"W\" \n## 4  <NA>               \"\"                  \n## 5 \"33\\xa159'12.48\\\"N\" \" 84\\xa119'25.32\\\"W\"\n## 6 \"34\\xa1 7'59.16\\\"N\" \" 84\\xa137'27.84\\\"W\"\nlatitudes <- fish$latitude %>%\n  #split by degree symbol and minutes symbol\n  str_split_fixed(pattern = \"\\xa1|'|\\\"\", n = 3) %>%\n  #convert from matrix to tibble and rename\n  as_tibble() %>%\n  setNames(c(\"deg\",\"min\",\"sec\"))## Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n## `.name_repair` is omitted as of tibble 2.0.0.\n## ℹ Using compatibility `.name_repair`.\n## This warning is displayed once every 8 hours.\n## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was\n## generated.\nlatitudes <- latitudes %>%\n  #remove north designation and seconds symbol\n  mutate(across(everything(), ~str_remove_all(.x, \"N|\\\"\"))) %>%\n  #convert strings to numeric\n  mutate(across(everything(), as.numeric)) %>%\n  #convert to decimal degrees\n  mutate(dd = deg + min/60 + sec/(60*60))\n\nlongitudes <- str_split_fixed(fish$longitude, pattern = \"\\xa1|'|\\\"\", n = 3) %>%\n  as_tibble() %>%\n  setNames(c(\"deg\",\"min\",\"sec\"))\nlongitudes <- mutate(longitudes, across(everything(), ~str_remove_all(.x, \"W|\\\"\"))) %>%\n  mutate(across(everything(), as.numeric)) %>%\n  mutate(dd = deg + min/60 + sec/(60*60))\n\nfish <- bind_cols(fish, lat = latitudes$dd, long = longitudes$dd)\nhead(fish %>% select(coordinates, lat, long))## # A tibble: 6 × 3\n##   coordinates                              lat  long\n##   <chr>                                  <dbl> <dbl>\n## 1  <NA>                                   NA    NA  \n## 2  <NA>                                   NA    NA  \n## 3 \"34\\xa107'59.2\\\"N, 84\\xa137'27.8\\\"W\"    34.1  84.6\n## 4  <NA>                                   NA    NA  \n## 5 \"33\\xa159'12.48\\\"N, 84\\xa119'25.32\\\"W\"  34.0  84.3\n## 6 \"34\\xa1 7'59.16\\\"N, 84\\xa137'27.84\\\"W\"  34.1  84.6"},{"path":"qaqc.html","id":"identifying-likely-errors","chapter":"17 Data Cleaning in R","heading":"17.4 Identifying likely errors","text":"Now data formatted correctly, still need make sure data points valid. Two main flavors incorrect data duplicates incorrect entries (sometimes called outliers).","code":""},{"path":"qaqc.html","id":"duplicates","chapter":"17 Data Cleaning in R","heading":"17.4.1 Duplicates","text":"duplicate just : piece data entered twice. True duplicates data points share information. make lives easy - just need identify remove one. duplicates ambiguous; example, sometimes come across GPS locations single animal timestamp different coordinates. case, can look values see likely (see “outliers” ) randomly choose one.check duplicates, can use group_by() summarize():, know data identical, can just take first rows:removed one row.columns unique identifiers, can use . example, think one row per sample ID.Let’s look sample:can look columns differ:looks like method1 problem:capitalization problem! ’re , don’t make sure fixed character columns:Now can remove final duplicate:","code":"\nfish %>%\n  group_by(across(everything())) %>% #use all columns as groups\n  summarize(n = n()) %>% #count the number in each group\n  filter(n > 1) #filter to groups with more than one entry## `summarise()` has grouped output by 'sample_id', 'common_name',\n## 'scientific_name', 'fish_length_mm', 'date_collected', 'sample_location',\n## 'coordinates', 'method1', 'method2', 'notes', 'date', 'latitude', 'longitude',\n## 'lat'. You can override using the `.groups` argument.## # A tibble: 1 × 16\n## # Groups:   sample_id, common_name, scientific_name, fish_length_mm,\n## #   date_collected, sample_location, coordinates, method1, method2, notes,\n## #   date, latitude, longitude, lat [1]\n##   sample_id common_name scientific_name     fish_length_mm date_collected\n##       <dbl> <chr>       <chr>                        <dbl> <chr>         \n## 1        11 Bluegill    Lepomis macrochirus            108 4/27/24       \n## # ℹ 11 more variables: sample_location <chr>, coordinates <chr>, method1 <chr>,\n## #   method2 <chr>, notes <chr>, date <date>, latitude <chr>, longitude <chr>,\n## #   lat <dbl>, long <dbl>, n <int>\nfish <- fish %>%\n  group_by(across(everything())) %>% #use all columns as groups\n  slice(1) #take the first item in each group\nnrow(fish_in) - nrow(fish)## [1] 1\nfish %>%\n  group_by(sample_id) %>% #use only sample ID as group\n  summarize(n = n()) %>% #count the number in each group\n  filter(n > 1) #filter to groups with more than one entry## # A tibble: 1 × 2\n##   sample_id     n\n##       <dbl> <int>\n## 1        21     2\nfilter(fish, sample_id == 21)## # A tibble: 2 × 15\n## # Groups:   sample_id, common_name, scientific_name, fish_length_mm,\n## #   date_collected, sample_location, coordinates, method1, method2, notes,\n## #   date, latitude, longitude, lat, long [2]\n##   sample_id common_name scientific_name fish_length_mm date_collected\n##       <dbl> <chr>       <chr>                    <dbl> <chr>         \n## 1        21 Warmouth    Lepomis gulosus            174 22/05/2024    \n## 2        21 Warmouth    Lepomis gulosus            174 22/05/2024    \n## # ℹ 10 more variables: sample_location <chr>, coordinates <chr>, method1 <chr>,\n## #   method2 <chr>, notes <chr>, date <date>, latitude <chr>, longitude <chr>,\n## #   lat <dbl>, long <dbl>\nfilter(fish, sample_id == 21) %>%\n  group_by(sample_id) %>% #group by sample ID\n  summarize(across(everything(), n_distinct)) %>% #get the number of unique values in each column\n  pivot_longer(cols = -sample_id) #pivot_longer just turns this into columns for visualization## # A tibble: 14 × 3\n##    sample_id name            value\n##        <dbl> <chr>           <int>\n##  1        21 common_name         1\n##  2        21 scientific_name     1\n##  3        21 fish_length_mm      1\n##  4        21 date_collected      1\n##  5        21 sample_location     1\n##  6        21 coordinates         1\n##  7        21 method1             2\n##  8        21 method2             1\n##  9        21 notes               1\n## 10        21 date                1\n## 11        21 latitude            1\n## 12        21 longitude           1\n## 13        21 lat                 1\n## 14        21 long                1\nfilter(fish, sample_id == 21) %>%\n  pull(method1)## [1] \"Electrofishing\" \"electrofishing\"\nfish <- fish %>%\n  mutate(common_name = str_to_title(common_name),\n         scientific_name = str_to_sentence(scientific_name),\n         sample_location = str_to_title(sample_location),\n         method1 = str_to_lower(method1),\n         method2 = str_to_lower(method2))\nfish <- fish %>%\n  group_by(sample_id) %>% #use all columns as groups\n  slice(1) %>% #take the first item in each group\n  ungroup()\nnrow(fish_in) - nrow(fish)## [1] 2"},{"path":"qaqc.html","id":"outliers","chapter":"17 Data Cleaning in R","heading":"17.4.2 Outliers","text":"quantitative variables, outliers values outside expected range data. outliers true data - example, organism large small species - due errors data entry, instrumentation, sampling. example, juvenile might measured sample supposed adults. identify outliers, can look range distributions numeric variables. fish dataset, one numeric variable: fish length.looks like bunch lengths way long reasonable. Let’s look values:see two outliers : 9,999 10,000. 9999 common code missing data, probably want replace NAs. 10,000 probably error data entry. Let’s convert NAs:looks better.Sometimes errors can corrected. example, sure 10000 supposed entered 100.00, replace value:non-numeric data, equivalent outlier unexpected value. easiest way look can listing unique values vector/column:, probably want replace “?” NA.","code":"\nrange(fish$fish_length_mm, na.rm=T)## [1]    27 10000\nhist(fish$fish_length_mm)\nfish %>%\n  filter(fish_length_mm > 6000) %>%\n  pull(fish_length_mm) %>%\n  unique()## [1]  9999 10000\nfish <- fish %>%\n  mutate(fish_length_mm = if_else(fish_length_mm > 6000, NA, fish_length_mm))\nhist(fish$fish_length_mm)\nfish <- fish %>%\n  mutate(fish_length_mm = if_else(fish_length_mm == 10000, 100, fish_length_mm))\nunique(fish$sample_location)## [1] \"?\"                   NA                    \"Lake Allatoona\"     \n## [4] \"Chattahoochee@Crnra\" \"Satilla River\"       \"Flint River\"        \n## [7] \"Lake Lanier\"         \"Chattahoochee River\" \"Ocmulgee River\"\nfish <- fish %>%\n  mutate(sample_location = if_else(sample_location == \"?\", NA, sample_location))"},{"path":"qaqc.html","id":"dealing-with-missing-data","chapter":"17 Data Cleaning in R","heading":"17.5 Dealing with missing data","text":"ecological data sets contain missing data. three main ways deal .","code":""},{"path":"qaqc.html","id":"filtering","chapter":"17 Data Cleaning in R","heading":"17.5.1 Filtering","text":"obvious way deal missing data ignore data points missing. , key question ask missing data matter. example, using spatial data, missing coordinates matter. filter() function combined if_any() if_all() friend . example, might want filter data length missing:location columns complete:code can little confusing. first option, asking case location columns NA. second option, asking case true hte location columns NA. Take close look see can figure logic. Sometimes kind backwards thinking necessary filtering.easier, less streamlined alternative :","code":"\nfish_len_complete <- filter(fish, !is.na(fish_length_mm))\nfish_loc_complete <- filter(fish, if_all(c(sample_location, long, lat), ~!is.na(.x)))\n# Equivalent to:\nfish_loc_complete <- filter(fish, !if_any(c(sample_location, long, lat), ~is.na(.x)))\nfish_loc_complete <- filter(fish, !is.na(sample_location) &\n                              !is.na(long) &\n                              !is.na(lat))"},{"path":"qaqc.html","id":"imputing","chapter":"17 Data Cleaning in R","heading":"17.5.2 Imputing","text":"Like example fish_length_mm == 10000 , might know reason missing values, allowing impute (.e., artificially add dataset). might also able use data dataset figure . example, missing coordinates location names:since coordinates location name elsewhere, can impute . First, make sure location name one lat/long associated:Depending data missing used, methods imputing data include:Predictions modelAverages rest data setProxies based measurements","code":"\nfilter(fish, is.na(long) & !is.na(sample_location)) %>%\n  select(sample_location, coordinates, lat, long)## # A tibble: 2 × 4\n##   sample_location     coordinates   lat  long\n##   <chr>               <chr>       <dbl> <dbl>\n## 1 Chattahoochee@Crnra <NA>           NA    NA\n## 2 Chattahoochee@Crnra <NA>           NA    NA\ncrnra_coords <- fish %>%\n  filter(sample_location == \"Chattahoochee@Crnra\" &\n           !is.na(long)) %>%\n  distinct(long, lat)\nnrow(crnra_coords)## [1] 1\nfish <- fish %>%\n  mutate(lat = if_else(sample_location == \"Chattahoochee@Crnra\" & is.na(lat), crnra_coords$lat, lat),\n         long = if_else(sample_location == \"Chattahoochee@Crnra\" & is.na(long), crnra_coords$long, long))"},{"path":"qaqc.html","id":"saving-clean-data","chapter":"17 Data Cleaning in R","heading":"17.6 Saving clean data","text":"Finally, data clean, save new version “clean” data folder.","code":"\nwrite_csv(fish, \"data/clean/georgia_fish_data_clean.csv\")"},{"path":"for-if.html","id":"for-if","chapter":"18 Iterating and Conditioning: for Loops and if Statements","heading":"18 Iterating and Conditioning: for Loops and if Statements","text":"","code":""},{"path":"for-if.html","id":"objectives-15","chapter":"18 Iterating and Conditioning: for Loops and if Statements","heading":"18.1 Objectives","text":"Apply loops automate repeating tasksUse conditional statements within loopsUnderstand use , , statements","code":""},{"path":"for-if.html","id":"additional-reading-12","chapter":"18 Iterating and Conditioning: for Loops and if Statements","heading":"18.2 Additional reading","text":"Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. R Data Science (2e). Chapter 27: field guide base R; Section 27.5: loops. Available: https://r4ds.hadley.nz/base-R.html#-loops","code":""},{"path":"for-if.html","id":"motivation","chapter":"18 Iterating and Conditioning: for Loops and if Statements","heading":"18.3 Motivation","text":"now “Advanced R” section course. Although concepts ’re learning might require little practice get right, also main power programming. part, operations learned far might easily reproducible done Excel, possible. example, pivot tables can group summarize data. lesson, use R automate repeating task using called loop, well working programming tools work well loop.","code":""},{"path":"for-if.html","id":"what-is-a-loop","chapter":"18 Iterating and Conditioning: for Loops and if Statements","heading":"18.4 What is a loop?","text":"loop allows iterate task, telling R thing . -loops keep code clean avoid unnecessary repetition code block. Loops especially useful want edit task later, since need edit operation instead time applied.","code":""},{"path":"for-if.html","id":"using-loops","chapter":"18 Iterating and Conditioning: for Loops and if Statements","heading":"18.5 Using loops","text":"Loops easiest understand example. basic syntax loop :example:, looped values object called vals. time R goes loop, assigns next value vals x. asked take logarithm x print screen.good application loop function log10() can take vector argument, get result print(log10(vals)).Loops become useful () function can’t operate vector, (b) want include conditional statements ().example, sample 100 values normal distribution mean 0 standard deviation 2, use rnorm(n = 100, mean = 0, sd = 2). wanted look distributions staandard deviations ranging 1 10? rnorm() can take single number sd, want use loop.Wait, work? ’s output! one finicky aspect loops takes getting used . operation happening inside loop, doesn’t print screen default. also takes practice assign new objects loops, :end last iteration saved norm_dist. solve problem, think type object like get loop. ’s let’s say want long-form data frame two columns: one stating standard deviation one 100 values distribution. can initiate data frame loop starts, add goes:Now, results saved:Loops take practice, basics able practice perfect. Remember:Create object outside loop save resultsLoops don’t print screen default. Add print() want see ’s happening.can loop vectors, also columns rows data frame. practice later.Troubleshooting loops can difficult, can always take look index stopped (x examples ) see problem one item particular, ’s something wrong get-go.","code":"for(variable in sequence){\n  do something\n}\nvals <- c(1, 10, 100, 1000, 10000, 100000)\nfor(x in vals){\n  print(log10(x))\n}## [1] 0\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n# Define the vector of standard deviations\nsd_vals <- c(1:10)\n# Loop over SDs\nfor(x in sd_vals){\n  # For each SD (x), get 100 values from a normal distribution with mean=0 and sd=x\n  rnorm(n = 100, mean = 0, sd = x)\n}\n# Define the vector of standard deviations\nsd_vals <- c(1:10) \n# Loop over SDs\nfor(x in sd_vals){\n  # For each SD (x), get 100 values from a normal distribution with mean=0 and sd=x\n  norm_dist <- rnorm(n = 100, mean = 0, sd = x)\n}\n# Define the vector of standard deviations\nsd_vals <- c(1:10)\n# Create an empty data frame in which to save data\nresults <- tibble()\n# Loop over SDs\nfor(x in sd_vals){\n  # For each SD (x), get 100 values from a normal distribution with mean=0 and sd=x\n  norm_vals <- rnorm(n = 100, mean = 0, sd = x)\n  # Create a two-column data frame with a column saving the SD (x) and a column with all simulated values\n  norm_vals_tib <- bind_cols(sd = x, val = norm_vals)\n  # Add these to the results data frame\n  results <- bind_rows(results, norm_vals_tib)\n}\ndim(results)## [1] 1000    2\nnames(results)## [1] \"sd\"  \"val\"\nggplot(results, aes(x = val, color = sd, group = sd)) +\n  geom_density() "},{"path":"for-if.html","id":"if-statements","chapter":"18 Iterating and Conditioning: for Loops and if Statements","heading":"18.6 if statements","text":"used if_else() function earlier create new columns conditional columns. statement basic form if_else(). similar format loop, ask R something condition met, potentially give alternatives . basic syntax statement :condition return single logical value (TRUE FALSE). loops closely tied - statements take vector arguments. can also add else keep going:, ask R evaluate condition1. returns FALSE, move condition2. condition2 FALSE “yet another thing”. differs first example, condition FALSE, R nothing.Let’s try example:great use statement :statements loops especially useful lists, cover soon.","code":"if(condition){\n  do something\n}if(condition1) {\n  do something\n} else if(condition2) {\n  do something else\n} else {\n  do yet another thing\n}\nanimal <- \"squirrel\"\n# Evaluate the first condition\nif(animal %in% c(\"mallard\",\"whimbrel\",\"trumpeter swan\")){\n  print(\"This is a bird.\")\n} else{ #If not met, do this other thing\n  print(\"This is not a bird.\")\n}## [1] \"This is not a bird.\"\nif_else(animal %in% c(\"mallard\",\"whimbrel\",\"trumpeter swan\"),\n        \"This is a bird.\",\n        \"This is not a bird.\")## [1] \"This is not a bird.\""},{"path":"for-if.html","id":"while-loops","chapter":"18 Iterating and Conditioning: for Loops and if Statements","heading":"18.7 while loops","text":"Writing loop requires know sequence loop . However, sometimes, want perform calculation condition met. , can use loop. loop combines syntax loop condition statement. example, let’s say wanted draw numbers vector sum greater 10. :loops can dangerous - always chance condition never met loop run forever! stop sign icon (top-right console) Session–>Interrupt R menu useful!","code":"\n# Define a vector of values to sample from\nall_vals <- rnorm(100, 4, 4)\n# Define empty objects to use within the loop\nvect <- vector()\nsum_vect <- 0\n# Run the loop as long as the sum_vect obejct is less than 10\nwhile(sum_vect <= 10){\n  # Randomly sample a value from the all_vals vector\n  new_val <- sample(all_vals, size = 1)\n  # Add this to our vector of values\n  vect <- c(vect, new_val)\n  # Take the sum and assign it to summ_vect, which goes back to \"while\"\n  sum_vect <- sum(vect)\n}\nprint(vect)## [1] -1.515467  4.518879  6.929122  6.929122\nprint(sum_vect)## [1] 16.86166"},{"path":"functions.html","id":"functions","chapter":"19 Writing Your Own Functions","heading":"19 Writing Your Own Functions","text":"","code":""},{"path":"functions.html","id":"objectives-16","chapter":"19 Writing Your Own Functions","heading":"19.1 Objectives","text":"","code":""},{"path":"functions.html","id":"additional-reading-13","chapter":"19 Writing Your Own Functions","heading":"19.2 Additional reading","text":"","code":""},{"path":"lists.html","id":"lists","chapter":"20 Complex Data Structures in R","heading":"20 Complex Data Structures in R","text":"","code":""},{"path":"lists.html","id":"objectives-17","chapter":"20 Complex Data Structures in R","heading":"20.1 Objectives","text":"","code":""},{"path":"lists.html","id":"additional-reading-14","chapter":"20 Complex Data Structures in R","heading":"20.2 Additional reading","text":"","code":""},{"path":"spatial.html","id":"spatial","chapter":"21 An Introduction to Spatial Data in R","heading":"21 An Introduction to Spatial Data in R","text":"","code":""},{"path":"spatial.html","id":"objectives-18","chapter":"21 An Introduction to Spatial Data in R","heading":"21.1 Objectives","text":"","code":""},{"path":"spatial.html","id":"additional-reading-15","chapter":"21 An Introduction to Spatial Data in R","heading":"21.2 Additional reading","text":"","code":""}]
